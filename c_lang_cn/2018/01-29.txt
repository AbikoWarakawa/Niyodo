00:16 cc quit:Quit: xc:www.chnxc.net
00:21 varna quit:Ping timeout: 248 seconds
01:12 matchray: 老鼠怎麼看 libdispatch 
04:10 CyrusYzGTt joined channel
07:20 matchray: lh_not_bot: 没懂 pull = pull --ff-only
08:53 lh_mouse joined channel
09:04 perr joined channel
09:04 perr quit:Changing host
09:04 perr joined channel
09:44 yonka joined channel
09:47 hanjian_l: lh_mouse: 我也没懂为什么要-ff-only
10:04 \s joined channel
10:06 \s_ quit:Ping timeout: 240 seconds
10:21 lh_mouse: hanjian_l, --ff-only 防止手贱用的。
10:22 lh_mouse: git pull 等价于 git fetch && git merge FETCH_HEAD   .
10:22 lh_mouse: --ff-only 的作用就是保证不会隐式 merge 掉 。
10:22 hanjian_l: 哦
10:23 hanjian_l: 但是pull不是本来就包含merge操作了么
10:23 hanjian_l: 如果不merge，那么索性只fetch好了？
10:23 hanjian_l: （不太会用git
10:23 lh_mouse: git pull --ff-only  等价于 && git merge FETCH_HEAD    --ff-only 。
10:23 lh_mouse: [10:23:08] <hanjian_l> 但是pull不是本来就包含merge操作了么 // 不对。
10:23 lh_mouse: pull 可以 --rebase 。
10:23 lh_mouse: 所以还是有用的。
10:24 hanjian_l: 好复杂……
10:24 lh_mouse: hanjian_l, https://github.com/lhmouse/git-workflow-zh/blob/master/workflow.md#%E7%A6%81%E6%AD%A2%E4%BA%8B%E9%A1%B9
10:24 hanjian_l: 我好多时候都是先pull master，然后再把自己的分支rebase合成一条，再提交上去merge到master
10:24 lh_mouse: 不需要。
10:24 hanjian_l: Aldrich: 上班打开模拟器摸鱼
10:24 lh_mouse: 你看上面的图。
10:25 hanjian_l: 嗯
10:25 lh_mouse: 右上的三角循环。
10:25 hanjian_l: git pull --rebase origin master就好了对不对
10:25 lh_mouse: 本地分支不用动， 直接 git pull --reb origin master 就行。
10:25 hanjian_l: 嗯，果然
10:25 hanjian_l: 我会用了
10:25 lh_mouse: --rebase 可以缩写成 --reb  。
10:26 lh_mouse: --continue 可以写成 --con 。
10:26 lh_mouse: --abort 可以写成 --ab 。
10:29 lh_mouse: git pull --reb origin master  等价于  git fetch origin && git merge origin/master  。
10:38 matchray: 老鼠的项目从哪一个开始看
10:39 matchray: https://github.com/lhmouse/poseidon/ ?
10:45 lh_mouse: 0.0
10:45 lh_mouse: 就那个还算有点用吧。
10:46 lh_mouse: wiki 还没写完，不过没心情写了。
10:48 lh_mouse: poseidon 都是些底层的东西，太乱了，。
10:48 matchray: 我讨厌根目录不大扫除
10:49 lh_mouse: 是，破烂有点多。
10:52 matchray: 用mariadb吗
10:53 lh_mouse: 直接调用的是 mysql 。 debian stretch 上 mysql-server 就是 mariadb 。
10:54 lh_mouse: 按说是兼容的。驱动还是默认 mysql 的。
10:54 lh_mouse: 托管主机的 RDB 很少有标称 mariadb 的，一般还是说 mysql 。
10:55 matchray: libmongoclient-dev ?
10:56 matchray: 依赖有点多啊，lbibson libmongoc-dev libboost-dev
10:57 matchray: 你的autoconf没有检测boost
10:57 matchray: ./configure 过了但是bear make不过
10:57 matchray: 下面是考验cquery的时刻了
10:57 lh_mouse: autoconf 没检测的。
10:57 lh_mouse: libmongoclient-dev 是窝自己写的。
10:58 lh_mouse: matchray, third 目录里有两个 sh 。
10:58 lh_mouse: 你可以看看。
10:58 lh_mouse: debian 改了 mysql 的 unix socket 路径，得加一些参数，否则原版驱动不能用。
10:58 yimis joined channel
10:58 lh_mouse: mongodb 主要就是 libbson 必须得使用 bundled。 
10:59 yimis quit:Client Quit
10:59 lh_mouse: 需要的 library 在 README.md 里写了，
10:59 lh_mouse: （其实窝才不会承认窝不会写 configure.ac ） 
11:01 matchray: 你应该用meson
11:04 lh_mouse: meson build system ?
11:04 lh_mouse: 好小众的东西呢。
11:05 lh_mouse: automake 唯一的好处就是到处都有。
11:05 lh_mouse: cmake  scons  ninja 之类的还得自己装。
11:05 lh_mouse: （其实窝都不会。）
11:05 matchray: poseidon 的特点是自己造了很多东西？
11:05 matchray: meson gnome也在用了
11:05 lh_mouse: 嗯怎么说呢，订要是协程吧。
11:06 lh_mouse: s/订要/主要/
11:06 matchray: 我也都不会。所以在用愚蠢的waf
11:06 lh_mouse: 主线程搭多协程，I/O  数据库等由子线程做。
11:06 lh_mouse: 通信是 promise-future 模型。
11:07 matchray: atomic.hpp
11:09 lh_mouse: poseidon 的目标就是把所有业务都丢主线程里，做成非阻塞的。
11:10 matchray: o, 因为你不能用C++11 ?
11:10 matchray: __atomic_sub_fetch __sync_synchronize 
11:10 lh_mouse: 对。
11:10 matchray: ......
11:10 lh_mouse: 这是 GCC 4.7 的。
11:11 lh_mouse: 只保证 GNU++98 源码级别的兼容和基本异常安全性。
11:12 lh_mouse: 主要支持的还是 C++11 和强异常安全性。
11:12 lh_mouse: cxx_ver 简直是在糊翔。
11:12 matchray: 才173行
11:12 lh_mouse: s/cxx_ver/&.hpp/
11:14 lh_mouse: atomic.hpp 是个历史遗留问题。
11:14 matchray: 不错，自从用上了c++11，基本操作都不会了。
11:14 lh_mouse: 窝在改 naming convention   。    sed -r -i 's/\<ATOMIC_([A-Z]+)/memorder_\l\1/g' $(grep -Elr '\<ATOMIC_' medusa2-*/src --inc "*.?pp")    
11:14 lh_mouse: fvck
11:14 lh_mouse: 应该用 \L 
11:15 lh_mouse: [A-Z_]
11:16 matchray: perl \L ?
11:16 lh_mouse: sed 的。
11:16 lh_mouse: 小写转大写。
11:17 lh_mouse: \l 只转一个  \L 转后续全部。
11:17 * lh_mouse 不会 perl 。
11:18 matchray: man perlre => \L          lowercase until \E (think vi)
11:20 lh_mouse: sed 也一样。
11:20 matchray: c++98 怎么 std::tr1::function ?
11:20 matchray: closure type不是特殊的吗
11:21 lh_mouse: 不能用 lambda expression 。
11:21 lh_mouse: 现在没用 std::tri::function  ，用的是 boost::function 。
11:21 lh_mouse: 捕获得显式 bind 。
11:22 lh_mouse: non-capturing lambda 可以用 local class + static member function 实现。
11:22 matchray: 我今天的commit就是针对function https://github.com/cquery-project/cquery/issues/353#issuecomment-360361924
11:23 lh_mouse: 实际上 C++11 窝是不推荐 [=] 的 lambda 的。 要 designated capture 还得 C++14 。
11:25 lh_mouse: 针对 function 这个 identifier 了？
11:25 lh_mouse: 你们写 IDE 的真勤劳。
11:26 matchray: 没办法。因为没写过C++，只能靠这个学习
11:28 matchray: 只有改变C/C++码农编辑器体验的人，才是真正有价值的人
11:29 bzzzt quit:Remote host closed the connection
11:35 matchray: 赞发现cquery.el没处理好Tab，已修
11:56 lh_mouse: 0.0
12:03 matchray: 发现了另一个问题。比较棘手
12:04 lh_mouse: 0.0
12:26 GODDOG joined channel
12:37 matchray: 编译速度超慢，不明
12:40 matchray: https://github.com/cquery-project/cquery/commit/a4028133f0d5b786e3cdc0b66f4b18227b1df93f
12:48 matchray: CONSTEXPR const unsigned char ...
12:48 matchray: const不是隐含在CONSTEXPR里的吗
12:48 matchray: #define CONSTEXPR const 会怎么样
12:58 lh_mouse: matchray, 函数呢。
12:58 lh_mouse: matchray, 确定有预编译头吗？
12:59 lh_mouse: 在窝的 vps 上 -O2 的优化  make -j4 一次大概四十几秒。
13:11 hanjian_l: Aldrich: genymotion可以装android虚拟机玩窑子前线
13:11 hanjian_l: 实测通过
13:11 IntPtr: ???
13:11 IntPtr: 好像有人 @ 我 (
13:11 hanjian_l: IntPtr: 哇，你潜水好久了
13:14 IntPtr: (因为我一直没上 irc 😂
13:14 IntPtr: (这个一直在服务器挂着
13:15 IntPtr: [2018-01-15 10:12:23] <hanjian_l> IntPtr: Stevearzh: cleamoon_: Youmu:
13:15 IntPtr: ???
13:16 Youmu: IntPtr: 0.0
13:17 hanjian_l: 啊，我at错了吧
13:17 hanjian_l: IntPtr: 来玩PS4啊
13:17 hanjian_l: Youmu: LP，来玩PS4
13:18 IntPtr: 我要玩 switch
13:29 Aldrich: hanjian_l: 我用过那玩意，不过感觉也有点蛋疼
13:29 hanjian_l: Aldrich: 没啥问题啊
13:29 hanjian_l: IntPtr: 现在频道里Switch玩家和PS4玩家分庭抗礼啊
13:30 Aldrich: 索尼大法好
13:54 GODDOG quit:Remote host closed the connection
14:16 L-ios1 joined channel
14:16 L-ios quit:Ping timeout: 264 seconds
14:16 L-ios1 is now known as L-ios
14:24 wurui joined channel
14:24 L-ios1 joined channel
14:25 L-ios quit:Ping timeout: 240 seconds
14:25 L-ios1 is now known as L-ios
14:36 hugesen joined channel
14:45 wurui quit:Read error: Connection reset by peer
14:49 GODDOG joined channel
14:54 GODDOG quit:Ping timeout: 260 seconds
14:55 GODDOG joined channel
14:56 L-ios quit:Quit: L-ios
15:01 L-ios joined channel
15:01 L-ios quit:Read error: Connection reset by peer
15:04 L-ios joined channel
15:09 GODDOG quit:Remote host closed the connection
15:11 GODDOG joined channel
15:23 GODDOG quit:Remote host closed the connection
15:35 GODDOG joined channel
15:54 matchray:  const unsigned char *begin() const { \n unsigned char *begin() const { // 重複了
15:54 matchray: D 用了 inout 解決
15:54 matchray: https://dlang.org/spec/function.html#inout-functions
15:59 \s quit:Max SendQ exceeded
16:01 \s joined channel
16:01 \s quit:Changing host
16:01 \s joined channel
16:09 matchray: ::std::move .....
16:13 matchray: socket_base.hpp virtual inheritance...
16:14 matchray: poseidon教我C++
16:16 GODDOG quit:
16:17 matchray: 簡直是一種享受 https://ptpb.pw/KECW.jpg
16:18 matchray: ::value 沒有高亮是因爲很難
16:20 lh_mouse: matchray, shared_from_this 当然应该虚拟继承。
16:20 lh_mouse: 另一个本来应该虚拟继承的是 std::exception 。
16:22 lh_mouse: matchray, 羡慕你们这帮用 true color 终端的。
16:23 matchray: 這個是 gtk emacs
16:23 lh_mouse: 噗。
16:23 matchray: 終端可能不能斜體
16:24 matchray: https://github.com/cquery-project/emacs-cquery/blob/master/cquery.el#L308
16:24 matchray: member var/function 斜體
16:24 matchray: 顏色從一個光譜取
16:25 matchray: 又是Vim用戶羨慕的功能
16:26 matchray: 我這裏分配顏色的邏輯可能需要調整下　https://github.com/cquery-project/emacs-cquery/blob/master/cquery.el#L230
16:27 matchray: template parameter可能要多分一點了
16:29 hanjian_l:  /opt/lib/ld-linux-x86-64.so.2 --library-path /root/wbb/centos_gcc/lib64 /usr/bin/rr
16:30 hanjian_l: 每次这个执行bin的时候我是崩溃的
16:30 hanjian_l: 这样执行
16:30 matchray: rr好玩嗎。
16:31 matchray: 原來還有 --library-path
16:32 matchray: 這個比起 LD_LIBRARY_PATH 好在那兒
16:39 IntPtr: https://i.imgur.com/OKdTe2Z.png
16:39 IntPtr: 终端可以斜体的
16:41 matchray: 這什麼終端？我的垃圾termite不支持
16:42 matchray: tmux不支持
16:44 hanjian_l: 这个不修改环境变量吧
16:44 hanjian_l: 跟sh就没关系了
16:44 matchray: print '\e[3mmeow\e[23m'
16:45 matchray: 我還在用 TERM=screen-256color ；這個不識別 sitm ritm 的；得改版 xterm-256color
16:46 lh_mouse: 请手动 ldconfig 。
16:46 lh_mouse: hanjian_l, 
16:46 hanjian_l: lh_mouse: 没明白什么意思
16:46 matchray: 儘量不要碰系統 /etc/ld.so.conf.d
16:47 lh_mouse: matchray, 没败那东西。
16:47 lh_mouse: 没改 * 
16:47 lh_mouse: centos 不清楚  。  debian 上如果不手动 ldconfig 更新缓存的话 /usr/local/lib 的 so 不会被加载的。
16:47 lh_mouse: 不需要改什么，只需要 sudo ldconfig 。
16:48 matchray: patchelf --set-interpreter /opt/lib/ld-linux-x86-64.so.2 /usr/bin/rr
16:49 matchray: patchelf --set-interpreter /opt/lib/ld-linux-x86-64.so.2 --set-rpath /root/wbb/centos_gcc/lib64 /usr/bin/rr
16:49 lh_mouse: 如果是 debian 我会在 /usr/local/lib 里加一个 symlink 。
16:50 matchray: cat /usr/local/bin/vi => #!/bin/sh\nexec ~/.local/bin/nvim "$@"
16:50 IntPtr: matchray: gnome
16:50 IntPtr: gnome-terminal, vte3-ng
16:51 IntPtr: termite 记得也是 vte3 啊
16:52 hanjian_l: lh_mouse: 小耗这个解释了之前为啥pacman -Syu不重启，有些东西会有BUG
16:52 lh_mouse: msys2 ？
16:52 matchray: IntPtr: 你的TERM是什麼
16:52 matchray: hanjian_l: 什麼bug
16:53 lh_mouse: hanjian_l, 估计是 unlink 的锅。
16:53 IntPtr: matchray: xterm-256color
16:53 hanjian_l: matchray: 就chromium会无法启动
16:53 lh_mouse: 更新了 so 文件之后如果原来的 so 被 unlink 了，可能有的进程还在用，这样的进程应该重启下。
16:54 lh_mouse: 不重启的话可能过一段时间会吃 segfault。
16:54 lh_mouse: 重启系统当然是保险的。
16:54 IntPtr: matchray: tmux 好像是不支持
16:55 lh_mouse: hanjian_l, 需要手动 ldconfig 的只有 /usr/local/lib 里的。
16:56 lh_mouse: 制做 .deb 包的时候要给 checkinstall 增加  --addso=yes  否则就需要手动 sudo ldconfig 。
16:56 lh_mouse: LD 这个太傻逼了。
16:56 lh_mouse: so 就应该默认在可执行文件的目录里搜索。
16:57 IntPtr: 跟 fc-cache 的感觉差不多 (x
16:57 matchray:  /usr/bin/clang 都是帶 DT_RUNPATH $ORIGIN/../lib 的
16:57 lh_mouse: zz
16:57 matchray: https://github.com/cquery-project/cquery/blob/master/wscript#L349
16:58 lh_mouse: 理想的模式就是     cp -RTp clang   /opt/clang    ;  ln -s /opt/clang /usr/bin/clang 
16:58 hanjian_l: lh_mouse: 这个作风太windows了吧，在当前目录先找dll
16:58 hanjian_l: 优先于系统及
16:58 lh_mouse: hanjian_l, 有什么问题。
16:58 matchray: 如果不是waf autotools我不知道怎麼寫這些hack
16:58 hanjian_l: 没问题。
16:58 lh_mouse: 本来就应该比系统的优先。
16:58 hanjian_l: 总比手工用LD_PRELOAD爽快
16:58 lh_mouse: 没被 dllhell  日够？
16:58 hanjian_l: 我可以直接把glibc塞进应用里
16:59 lh_mouse: 同名就兼容了？
16:59 hanjian_l: lh_mouse: 小耗教训的是
16:59 hanjian_l: 垃圾elf
16:59 hanjian_l: 垃圾/lib
17:00 matchray: 一個靜態libc，一個動態libc，真的可以一起工作的
17:00 matchray: jemalloc 混合 glibc malloc 如何
18:07 hanjian_l: Aldrich: 今晚突突突？
18:10 Aldrich: 羊驼子来么
18:12 hanjian_l: 羊驼子等他下班了才知道
18:12 hanjian_l: 总不能打个游戏还给他打电话问吧……
18:13 Aldrich: 那我先补个觉…
18:13 Aldrich: JST2200起来
18:15 hanjian_l: 那就是cst21嗯，差不诺
18:15 hanjian_l: 差不多
18:36 perr quit:Quit: Leaving
18:51 hanjian_l: 下班的时候用电脑玩窑子被主管看到了
19:08 FSZSY joined channel
19:09 FSZSY left channel:"Leaving"
19:13 Youmu: hanjian_l: 窑子是只叶
19:13 Youmu: hanjian_l: 窑子是啥
19:29 hanjian_l: Youmu: 少女前线
19:29 hanjian_l: Aldrich: 羊驼子来了
19:29 hanjian_l: 突突突
19:35 lh_mouse: hanjian_l, 主管：“死宅真恶心。”
19:35 hanjian_l: 。。。
19:56 smix joined channel
20:00 smix quit:Quit: Leaving
20:39 iyzsong joined channel
20:50 lh_not_bot: 07:20 < matchray> lh_not_bot: 没懂 pull = pull --ff-only
20:50 lh_not_bot: matchray: git config --help  =>    If the global or the system-wide configuration file are not available they will be ignored.  
20:51 lh_not_bot: 噗。
20:51 lh_not_bot: 是这句：   To avoid confusion and troubles with script usage, aliases that hide existing Git commands are ignored.
20:53 yonka quit:Remote host closed the connection
20:54 yonka joined channel
20:56 yonka quit:Read error: Connection reset by peer
20:57 yonka joined channel
21:01 yonka_ joined channel
21:02 yonka quit:Ping timeout: 276 seconds
21:03 yonka_ quit:Read error: Connection reset by peer
21:04 yonka_ joined channel
21:06 yonka_ quit:Read error: Connection reset by peer
21:07 yonka_ joined channel
21:08 yonka__ joined channel
21:09 yonka joined channel
21:11 yonka_ quit:Ping timeout: 260 seconds
21:13 yonka__ quit:Ping timeout: 276 seconds
21:14 yonka_ joined channel
21:14 yonka quit:Ping timeout: 276 seconds
21:15 yonka_ quit:Read error: Connection reset by peer
21:21 yonka joined channel
21:25 yonka quit:Ping timeout: 256 seconds
21:39 yonka joined channel
21:43 yonka quit:Ping timeout: 264 seconds
22:15 yonka joined channel
22:15 xhe joined channel
22:47 yonka quit:Remote host closed the connection
22:48 yonka joined channel
22:53 yonka quit:Ping timeout: 256 seconds
22:58 yonka joined channel
23:38 lh_mouse quit:Ping timeout: 240 seconds
23:42 yonka quit:Remote host closed the connection
