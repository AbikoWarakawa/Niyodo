0:4 lh_mouse:#ifndef _TT_GCC_UTILS_H_   <= 噗
0:6 lh_mouse:        // Here I use interger 0
0:6 lh_mouse:        // represents red and 1 for black.  // 英死早了么
0:6 lh_mouse:use ... to ... and ... 
0:7 T2:不要在意语法。
0:7 lh_mouse:呵呵
0:7 T2:自然语言你懂的。
0:8 T2:我说你能听懂就行。
0:8 lh_mouse: void *               v; // value  // 这东西可以不要
0:10 T2:lh_mouse, 其实我打算做成侵入式的，key都不打算要。
0:11 FrankHB:enum会死
0:11 FrankHB:么
0:12 T2:FrankHB, ？是用的enum啊。
0:12 xxxxxxxx:键盘干了的样子?
0:58 lh_mouse:geordi, << TYPE(i); static int a; auto i = foo(); int &foo(){ return a; }
0:58 geordi:error: 'foo' was not declared in this scope
0:58 lh_mouse:geordi, << TYPE(i); static int a; int &foo(){ return a; } auto i = foo();
0:58 geordi:lvalue int
0:58 lh_mouse:geordi, append & after auto
0:58 geordi:lvalue int
0:58 lh_mouse:geordi, show
0:58 geordi:<< TYPE(i); static int a; int &foo(){ return a; } auto& i = foo();
0:59 lh_mouse:geordi, undo and append (int) before last foo
0:59 geordi:lvalue int
0:59 lh_mouse:geordi, show
0:59 geordi:<< TYPE(i); static int a; int &foo(){ return a; } auto i = (int)foo();
0:59 lh_mouse:geordi, undo and remove first &
0:59 geordi:lvalue int
1:1 lh_mouse:geordi, <<&a <<' ' <<&i; static int a; int &foo(){ return a; } auto i = foo();
1:1 geordi:0x609e64 0x609e5c
1:1 lh_mouse:geordi, append & before last i 
1:1 geordi:0x609e6c 0x609e6c
1:1 lh_mouse:geordi, show
1:1 geordi:<<&a <<' ' <<&i; static int a; int &foo(){ return a; } auto &i = foo();
1:50 lh_mouse:geordi, { try { S a[3] = {1, 2, 3} } catch(..){ } } struct S { int i; S(int k):i(k){ cout <<'C'<<i<<' '; } ~S(){ cout <<'D'<<i<<' '; } };
1:50 geordi:error: expected ',' or ';' before '}' token
1:50 lh_mouse:geordi, { try { S a[3] = {1, 2, 3}; } catch(..){ } } struct S { int i; S(int k):i(k){ cout <<'C'<<i<<' '; } ~S(){ cout <<'D'<<i<<' '; } };
1:50 geordi:error: expected type-specifier before '.' token
1:50 lh_mouse:geordi, { try { S a[3] = {1, 2, 3}; } catch(...){ } } struct S { int i; S(int k):i(k){ cout <<'C'<<i<<' '; } ~S(){ cout <<'D'<<i<<' '; } };
1:50 geordi:C1 D1 C2 D2 C3 D3 D3 D2 D1 
1:50 lh_mouse:geordi, { try { S a[3]; } catch(...){ } } static int idx = 0; struct S { int i; S():i(++idx){ cout <<'C'<<i<<' '; } ~S(){ cout <<'D'<<i<<' '; } };
1:50 geordi:C1 C2 C3 D3 D2 D1 
1:51 lh_mouse:geordi, { try { S a[5]; } catch(...){ } } static int idx = 0; struct S { int i; S():i(++idx){ cout <<'C'<<i<<' '; } ~S() noexcept(false) { if(i == 3){ throw 12345; } cout <<'D'<<i<<' '; } };
1:51 geordi:C1 C2 C3 C4 C5 D5 D4 
7:3 sleepwalking joined channel
8:59 Ver1tas joined channel
9:3 zzzzzzzz joined channel
9:4 whocares_2 joined channel
9:8 lh_mouse joined channel
9:9 xxxxxxxx joined channel
9:13 xxxxxxxx:广电总局强调“先审后播”原则 大批美剧下架 <- 搞了半天又是光腚这群混蛋
9:20 silencly07 joined channel
9:32 lh_mouse:geordi, { try{ S s; }catch(...){ cout<<"exception caught"; } struct S { ~S(){ throw 12345; } };
9:32 geordi:error: Unexpected end of request. Expected '}' or balanced code.
9:32 lh_mouse:geordi, { try{ S s; }catch(...){ cout<<"exception caught"; } } struct S { ~S(){ throw 12345; } };
9:32 geordi:terminated by exception: 12345
9:32 lh_mouse:geordi, append noexcept after ~S()
9:32 geordi:No change in output.
9:32 lh_mouse:geordi, <<1
9:33 geordi:1
9:33 lh_mouse:clear
9:33 lh_mouse:geordi, { try{ S s; }catch(...){ cout<<"exception caught"; } } struct S { ~S(){ throw 12345; } };
9:33 geordi:terminated by exception: 12345
9:33 lh_mouse:geordi, append noexcept(false) after ~S()
9:33 geordi:exception caught
9:36 sleepwalking joined channel
9:36 lh_mouse:geordi, <<noexcept(S()); struct S { S(){ } ~S(){ } };
9:36 geordi:false
9:37 lh_mouse:geordi, <<noexcept(S()); struct S { S() noexcept { } ~S() noexcept { } };
9:37 geordi:true
9:37 lh_mouse:geordi, remove last noexcept
9:37 geordi:true
9:37 lh_mouse:geordi, undo and remove last second noexcept
9:37 geordi:error: String `second noexcept` does not occur.
9:37 lh_mouse:geordi, undo and remove second last noexcept
9:37 geordi:false
9:37 lh_mouse:geordi, show
9:37 geordi:<<noexcept(S()); struct S { S()  { } ~S() noexcept { } };
9:38 lh_mouse:geordi, { try { S s; throw 456; } catch(...){ S s }; } struct S { ~S(){ throw 123; } };
9:38 geordi:error: expected initializer before '}' token
9:39 lh_mouse:geordi, { try { S s; throw 456; } catch(...){ S t } } struct S { ~S(){ throw 123; } };
9:39 geordi:Same error.
9:39 lh_mouse:geordi, { try { S s; throw 456; } catch(...){ S t; } } struct S { ~S(){ throw 123; } };
9:39 geordi:terminated by exception: 123
9:40 sleepwalking joined channel
9:41 lh_mouse:geordi, remvoe S t; 
9:41 geordi:error: 'remvoe' does not name a type
9:41 lh_mouse:geordi, remove S t; 
9:41 geordi:Same error.
9:41 lh_mouse:geordi, show
9:41 geordi:remvoe 
9:41 lh_mouse:geordi, undo and undo and remove S t; 
9:41 geordi:error: Unexpected `undo` after `undo and `. Expected edit command.
9:41 lh_mouse:geordi, { try { S s; throw 456; } catch(...){ } } struct S { ~S(){ throw 123; } };
9:41 geordi:terminated by exception: 123
9:55 condy joined channel
9:56 iyzsong joined channel
11:8 lh_mouse:geordi, { function<void()> fn = bind([](const char *s){ cout<<s; }, "meow! "); } void *operator new(size_t cb){ printf("alloc(%zu) ", cb); return ::malloc(cb); } void operator delete(void *p) noexcept { ::free(p); }
11:8 geordi:alloc(40) alloc(40) alloc(40) alloc(40) alloc(40) alloc(40) alloc(16) 
11:8 lh_mouse:geordi, { /*function<void()> fn = bind([](const char *s){ cout<<s; }, "meow! ");*/ } void *operator new(size_t cb){ printf("alloc(%zu) ", cb); return ::malloc(cb); } void operator delete(void *p) noexcept { ::free(p); }
11:8 geordi:alloc(40) alloc(40) alloc(40) alloc(40) alloc(40) alloc(40) 
11:26 silencly07 joined channel
12:42 sleepwa21 joined channel
13:6 krfantasy joined channel
13:12 lh_mouse:<< TYPE_DESC<fooPtr>; struct S; typedef int (S::*fooPtr)(int, int, int);
13:12 lh_mouse:geordi, << TYPE_DESC<fooPtr>; struct S; typedef int (S::*fooPtr)(int, int, int);
13:12 geordi:pointer to member function of class S taking 3 integers and returning an integer
13:12 lh_mouse:geordi, << TYPE_DESC<fooPtr>; struct S; typedef int (S::*fooPtr)(int, double, int);
13:12 geordi:pointer to member function of class S taking an integer, a double, an integer, and returning an integer
13:12 lh_mouse:geordi, << TYPE_DESC<fooPtr>; struct S; typedef int (S::*(S::*fooPtr)(int))(double);
13:12 geordi:pointer to member function of class S taking an integer and returning a pointer to member function of class S taking a double and returning an integer
13:21 lh_mouse:geordi, { new int[2]; } void *operator new(size_t cb){ return malloc(cb); } void operator delete(void *p) noexcept { free(p); } 
13:21 geordi:<no output>
13:21 lh_mouse:geordi, { new int[2]; } void *operator new(size_t cb){ printf("op_new "); return malloc(cb); } void operator delete(void *p) noexcept { printf("op_del "); free(p); } 
13:21 geordi:op_new op_new op_new op_new op_new op_new 
13:37 Mutone joined channel
13:38 Mutone:haha
13:38 Mutone:no zuo no die
13:38 krfantasy joined channel
13:50 lh_mouse:geordi, { delete new(nothrow) int; } void *operator new(size_t cb){ printf("op_new "); return malloc(cb); } void operator delete(void *p) noexcept { printf("op_del "); free(p); } 
13:50 geordi:op_new op_new op_new op_new op_new op_new op_del 
13:57 richselian joined channel
13:59 richselian:疼
14:7 iyzsong:烧
14:8 hysw:iyzsong, richselian: 把人品交出来
14:8 iyzsong:人品是啥
14:20 lh_mouse:operator new 这渣渣
14:20 lh_mouse:也许 libstdc++ 渣渣
14:33 richselian:疼
14:33 richselian:gcc-3.4.5渣
14:45 T2 joined channel
14:46 T2:lh_mouse, header:  http://pastebin.mozilla.org/4985191 
14:46 T2:impl:  http://pastebin.mozilla.org/4985150 
14:46 T2:utils:  http://pastebin.mozilla.org/4985221 
14:46 T2:昨天断电了.
14:46 T2:orz
14:47 xxxxxxxx:http://bedrocklinux.org/introduction.html 
14:57 T2:xxxxxxxx, 这是神马?
14:57 xxxxxxxx:神奇的发行版
15:0 iyzsong:orz
15:3 xxxxxxxx:iyzsong 神奇吧
15:7 iyzsong:...
15:8 iyzsong:xxxxxxxx: 你先去试几个月..
15:8 xxxxxxxx:我才不用这种逗比发行版
15:8 T2:这个有点叼吖卧槽
15:8 xxxxxxxx:至少不第一个去用
15:9 T2:羊驼子会用的.
15:9 T2:我们等待试用结果就好
15:9 xxxxxxxx:他已经卖给arch了
15:9 T2:我TM想上TC++PL求阻止.
15:10 T2:C艹11不带书看不懂啊艹
15:14 xxxxxxxx:上次那个菩提 好看是好看 基于友邦拓 总觉得有点难受 update的时候
15:14 xxxxxxxx:而且enlightenment的那个终端真好看
15:34 T2:xxxxxxxx, 我用sakura
15:38 T2:clcn_wikibot, You must from now, be more than one, many people, as many as you can think of...
15:40 Administrator_ joined channel
16:9 sleepwalking joined channel
16:10 tsuki joined channel
16:19 richselian:疼
16:22 tsuki:烧
16:23 tsuki:要烧的人太多，火把不够了
16:31 T2:tsuki, 2333，我借你点。
16:36 tsuki:去烧miku
16:43 sleepwalking:啊嚏。。。
16:44 lh_mouse:geordi, { tuple<char, int, double> t = { 'a', 1, 1.5 }; cout << foo<0>(t) << foo<1>(t) << foo<2>(t); } template<int N, class T> auto &foo(const T &){ return std::get<N>(t); }
16:44 geordi:error: 't' was not declared in this scope
16:44 lh_mouse:geordi, { tuple<char, int, double> t = { 'a', 1, 1.5 }; cout << foo<0>(t) << foo<1>(t) << foo<2>(t); } template<int N, class T> auto &foo(const T &t){ return std::get<N>(t); }
16:44 geordi:error: converting to 'tuple<char, int, double>' from initializer list would use explicit constructor 'constexpr tuple< <template-parameter-1-1> >::tuple({char&& ...) [with int, double}; <template-parameter-2-2> = void; _Elements = {char, int, double}]'
16:44 lh_mouse:geordi, { auto t = make_tuple('a', 1, 1.5); cout << foo<0>(t) << foo<1>(t) << foo<2>(t); } template<int N, class T> auto &foo(const T &t){ return std::get<N>(t); }
16:44 geordi:a11.5
16:46 xxxxxxxx joined channel
16:47 lh_mouse:geordi, { std::string s("meow"); } extern "C" void *_Znwy(size_t cb){ printf("op new "); return ::malloc(cb); } extern "C" void _ZdlPv(void *p){ ::free(p); }
16:47 geordi:<no output>
16:48 lh_mouse:geordi, { ::operator new(5); } extern "C" void *_Znwy(size_t cb){ printf("op new "); return ::malloc(cb); } extern "C" void _ZdlPv(void *p){ ::free(p); }
16:48 geordi:<no output>
16:53 lh_mouse:geordi, { ::operator new(5); } extern "C" void *_Znwm(size_t cb){ printf("op new "); return ::malloc(cb); } extern "C" void _ZdlPv(void *p){ ::free(p); }
16:53 geordi:op new op new op new op new op new op new op new 
16:57 sleepwalking joined channel
16:59 tsuki:笑尿：   http://danhuaer.com/t/179306
17:10 sleepwal_ joined channel
17:10 sleepwal_:http://imagebin.org/307918 待会先洗澡，然后玩换装play
17:12 richselian:疼
17:13 lh_mouse:这是谁？
17:13 sleepwal_:我
17:13 lh_mouse:0.0
17:14 *lh_mouse 正在想“难道这就是后宫王？”
17:18 tsuki:233
17:18 tsuki:cos完就能看出为什么miku有那么多扣脚大汉的男朋友了
17:20 richselian:疼
17:20 richselian:疼
17:20 richselian:长了20%工资
17:21 iyzsong:...
17:23 richselian:疼
17:25 tsuki:肉牛长久没被烧菊花疼了
17:29 tsuki:睡前加的？
17:34 richselian:噗
17:35 tsuki:那是睡后加的
17:39 lh_mouse:你们一年涨几次？
17:40 T2:tsuki, 卧槽，业界良心。
17:41 T2:richselian, 不要刺激没工作的了ok？
17:42 tsuki:耗子去度娘工作？
17:43 xxxxxxxx:T2 这也算别人的问题么?
17:43 richselian:lh_mouse: 两次
17:43 richselian:lh_mouse: 9月还有一次
17:44 T2:xxxxxxxx, 这倒不是
17:44 lh_mouse:我可没什么兴趣
17:45 T2:xxxxxxxx, 就是想到吾辈要找到饭碗还要很多年就莫名的疼.
17:46 richselian:lh_mouse: 现在已经转来写后台了
17:46 richselian:lh_mouse: 做了大半年的数据
17:47 tsuki:写后台总感觉比较好
17:49 lh_mouse:呵呵   论如何窃取用户的隐私
17:50 Administrator_ joined channel
17:50 tsuki:+
17:51 tsuki:肉牛不通知个谁把贴吧弄正常点？
17:53 T2:tsuki, 似乎那不是他的指责范围
17:53 T2:职责
17:54 tsuki:就说那个导致后台崩溃就行了
17:54 T2:tsuki, 那PM会告诉你, 你给我修好.
17:54 lh_mouse:你还希望百度能变“正常”？
17:55 lh_mouse:你这想法就是不正常的
17:55 T2:+
17:55 Administrator_ left channel
17:56 T2:不能圈钱的产品和不能盈利的企业都是不道德的.
17:56 T2:你这想法就不正常.
17:57 lh_mouse:百度不正常是正常的
17:57 Administrator_ joined channel
17:58 T2:吾辈撸的东西似乎太"标准"了.
17:58 tsuki:主要目的不是让度娘正常，而是让肉牛失业
17:58 T2:好像没什么能操作的东西.
17:58 T2:除了数据结构
17:58 T2:而且"标准"到接口都设计不好.
17:59 tsuki:看耗子的码，接口设计的不错
17:59 T2:C艹11 + socket 会不会好点?
17:59 lh_mouse:肉牛是否失业和我有什么关系
17:59 T2:tsuki, 他用C艹, 我用C.
17:59 tsuki:失业好玩
17:59 tsuki:接口的设计方式没区别
18:0 T2:tsuki, 不开扩展你想设计什么样的接口?
18:0 T2:有对象池或者内存池怎么办?
18:0 tsuki:不过你用c干什么
18:0 xxxxxxxx:所以说你们说了半天正常啥样才是正常?
18:0 T2:tsuki, 只是不想跟C艹斗争而已.
18:0 lh_mouse:tsuki, 很多都没仔细 review 的  昨天发现他妈的 multi indexed map 的拷贝构造函数手贱加了 noexcept
18:1 lh_mouse:http://imagebin.org/307921  神吐槽
18:1 tsuki:lh_mouse: 我说接口... 代码为了效率的hack太多，我不很喜欢
18:1 xxxxxxxx:老物
18:2 tsuki:2333
18:2 T2:你说rbt的insert接口怎么设计?
18:2 lh_mouse:tsuki, 所以得重构
18:2 lh_mouse:string 我重构五次了
18:2 richselian:疼
18:2 T2:C的话
18:3 T2:我是直接让用户丢个node进来了.
18:3 richselian:rbt用rbt的接口就行了
18:3 T2:大概应该也许 maybe perhaps 不会疼死.
18:4 tsuki_ joined channel
18:4 T2:richselian, 似乎理想的状况应该是丢个 key 进来.
18:4 T2:但是不开扩展做不到.
18:4 richselian:要拿rbt支持set、dict什么的，就在外面做个wrapper
18:5 T2:除非无视池直接艹用户堆.
18:5 richselian:T2 丢key会蛋疼
18:6 T2:richselian, header:  http://pastebin.mozilla.org/4985191 
18:6 T2:impl:  http://pastebin.mozilla.org/4985150 
18:6 T2:utils:  http://pastebin.mozilla.org/4985221 
18:6 richselian:T2 效率无法直视
18:7 T2:可以用那个 utils, 然后直接艹成侵入式的.
18:7 T2:这样就 gcc-only 了
18:8 sleepwalking joined channel
18:8 T2:然后强制编译器展开
18:9 T2:也可以顺便干掉碎片.
18:9 richselian:C已弃疗
18:9 T2:不管内存池还是对象池都不会死.
18:10 Administrator_ left channel
18:10 T2:卧槽这是一定要上C艹的节奏.
18:10 T2:看看 std::map
18:11 T2:C 就 TM 是后娘养的.
18:13 tsuki joined channel
18:14 T2:C艹11 + socket 似乎可以做一些坏事了.
18:14 tsuki:连hack一起重构？那你到底想要什么样的库呀...
18:15 T2:tsuki, 不是库, 我想要C标准支持类型推导, 语句表达式, 最好还有闭包.
18:15 T2:这不影响运行时效率
18:15 tsuki:我指的耗子
18:16 tsuki:你要的只能hack
18:16 tsuki:而且没必要拿c写
18:16 T2:tsuki, C艹太疼, 人生苦短.
18:16 tsuki:人生苦短才不能用c...
18:18 T2:好吧, 麻痹不就是个C艹么.
18:18 T2:干掉就是了.
18:20 tsuki:如果不是极限运算效率用不着偏用c，那个支持的语义太少了...
18:21 T2:tsuki, C的效率不可能比C艹高说,就因为那个void*
18:22 T2:羊驼那种丧病的hack不算
18:22 T2:拙计的语义
18:24 tsuki:void *又不影响速度
18:25 richselian:T2: libzling都弃疗了
18:25 richselian:tsuki 影响
18:25 tsuki:richselian: ？怎么个影响法？
18:26 T2:richselian, 我也打算弃疗了。
18:28 T2:tsuki, 比方说struct s{s * next; void * key} 和 template<class key_type> struct s{s * next; key_type key;}
18:29 T2:干掉了碎片同时干掉了寻址.
18:29 T2:语义高下立判
18:29 T2:你再扔个value进去
18:30 tsuki:这个影响效率？
18:30 T2:寻址要时间么?
18:30 T2:不然要对象池来干嘛?
18:31 T2:其他乱七八糟的玩意
18:31 tsuki:哦，那c艹这里是怎么实现的呢？
18:32 T2:C艹其实做了个妥协
18:32 T2:牺牲了类型推导能力
18:34 tsuki:c艹不用寻址？
18:34 T2:不用
18:36 tsuki:那怎么做
18:36 T2:tsuki, 直白地说就是以Ad Hoc多态代Parametric多态
18:37 T2:tsuki, 如果用模板，意味着类型推导不健全
18:37 T2:tsuki, 
18:37 T2:不用，就是System F
18:38 T2:tsuki, 而包含多于二阶类型的 System F 实现不停机
18:38 tsuki:哦，省在这里呀
18:40 T2:tsuki, 只是模板,还有闭包,还有羊腿大
18:40 tsuki:原来c艹de语义比我想的还混乱...
18:41 tsuki:的
18:41 T2:tsuki, Life is too short to learn C++
18:42 tsuki:非职业就不用把每部分都弄那么清楚，会用就行了
18:42 T2:也对
18:44 tsuki:你不是要做职业吗...
18:44 Plough joined channel
18:45 T2:tsuki, 我不做职业语言研究就好了.
18:45 T2:clcn_wikibot, type inference
18:46 T2:这玩意挂了
18:47 tsuki:可是你要正经用呀... 我用的时候都不会为几秒发愁，可是如果你写服务器后台那一个指令慢几秒不就崩了
18:48 T2:tsuki, 我还6年才毕业呢.
18:48 tsuki:...
18:48 T2:毕业找了工作再考虑后台慢几秒.
18:50 tsuki:好久
18:51 Sleepwalking joined channel
18:51 T2:是很久
18:51 T2:所以先"会用"吧
18:53 tsuki:你应该能比正太先毕业
18:55 lh_mouse:tsuki, 自己写着玩的
18:55 lh_mouse:如果仅说自己在公司写的   完全没可比性
18:55 lh_mouse:https://github.com/lhmouse/MCF/blob/master/MCF/Core/String.hpp
18:55 lh_mouse:https://github.com/lhmouse/MCF/blob/master/MCF/Core/StringObserver.hpp
18:56 tsuki:在公司写的好？
18:56 T2:tsuki, 吃饭...t.t
18:58 lh_mouse:tsuki, 显然不可能
18:59 tsuki:soga...
19:6 tsuki:环球时报:下架美剧为挺国产剧 环球时报 04-28 10:39
19:6 tsuki:然后央视宣布引进big bang theory
19:7 iyzsong: - -b
19:7 T2:0.0
19:7 T2:手撕鬼子大好评!
19:7 T2:2333
19:8 tsuki:先禁了，然后再引进，你能不能中间隔两天，别抢得那么明显
19:19 T2:有钱大家赚嘛.
19:19 T2:你们这些 咳咳
19:19 T2:也不表示一下, 劳资都没油水了.
19:21 condy joined channel
19:23 xxxxxxxx:傻逼光腚 你就是把全球电视台都和谐了春晚也不会看的人变多的
19:33 menma joined channel
19:36 menma:快到碗里去
19:42 richselian:疼
19:43 menma:揉揉牛
19:47 richselian:揉面码
19:53 lh_mouse:menma, 快到碗里来
20:11 lhanjian joined channel
20:20 richselian:疼
20:21 lhanjian:richselian, 揉
20:29 richselian:疼
20:29 richselian:回家
20:35 hope1 joined channel
20:48 tsuki:海棠什么时候考试？
20:57 tsuki_ joined channel
20:58 Lord_V joined channel
21:0 T2:geordi, int main() { int i = 1; cout << i << (i=i*2) << endl; }
21:1 geordi:warning: operation on 'i' may be undefined
21:2 T2:geordi, int main() { int i = 1; cout << i, i *= 2; }
21:2 geordi:Same warning.
21:2 whocares_2_ joined channel
21:6 sismvg joined channel
21:7 code_new joined channel
21:8 sismvg:谁把他脖子后面的铁栓给拔掉
21:9 iyzsong:什么铁栓?
21:9 tsuki joined channel
21:10 sismvg:极黑里魔法师的生命
21:10 tsuki:23333 为了减肥，忍痛花3000办了张健身年卡，虽然一次都没去，但没钱吃饭，一个月果然瘦了5斤。。。(net)
21:10 iyzsong:不是按钮么..
21:11 iyzsong:2333
21:11 condy:geordi: TYPE_DESC(int)
21:11 geordi:error: template argument 1 is invalid
21:11 sismvg:我瘦了10斤。。基本不饿（碳水化合物。。。）
21:12 condy:geordi: << TYPE_DESC(int* p)
21:12 geordi:Same error.
21:12 condy:geordi: << TYPE_DESC(int)
21:12 geordi:Same error.
21:14 condy:geordi: << TYPE(int)
21:14 geordi:Same error.
21:15 condy:geordi: << TYPE(&system)
21:15 geordi:rvalue int (*)(char const*)
21:15 condy:geordi: << TYPE(int*)
21:15 geordi:error: template argument 1 is invalid
21:16 condy:geordi: int f(int (*)(), double (*)[3]); int f(int (*)(char*), double (*)[]); { cout << TYPE(f); }
21:16 geordi:error: parameter '<anonymous>' includes pointer to array of unknown bound 'double []'
21:17 tsuki:这是什么操作符....
21:17 condy:geordi: void (*(*(*f[])(int*, int, int (*)(const void*, const void*)))[3](int*, int); cout << TYPE(f);
21:17 geordi:error: Unexpected end of request. Expected ')' or balanced code.
21:18 condy:不知道。。。今天看mouse用的。
21:19 condy:geordi: void (*(*(*f[])(int*, int, int (*)(const void*, const void*)))[3])(int*, int); cout << TYPE(f);
21:19 geordi:error: storage size of 'f' isn't known
21:20 condy:geordi: typedef void (*(*(*f[])(int*, int, int (*)(const void*, const void*)))[3])(int*, int); f x; cout << TYPE(x);
21:20 geordi:error: storage size of 'x' isn't known
21:20 condy:geordi: typedef void (*(*(*f[3])(int*, int, int (*)(const void*, const void*)))[3])(int*, int); f x; cout << TYPE(x);
21:20 geordi:error: 'cout' does not name a type
21:20 condy:geordi: typedef void (*(*(*f[3])(int*, int, int (*)(const void*, const void*)))[3])(int*, int); f x; cout << TYPE(&x);
21:20 geordi:Same error.
21:21 condy:geordi: typedef void (*(*(*f)(int*, int, int (*)(const void*, const void*)))[3])(int*, int); f x; cout << TYPE(x);
21:21 geordi:Same error.
21:21 condy:不会用。。。
21:21 lhanjian:极黑好看
21:21 condy:geordi: int x; cout << TYPE(x);
21:21 geordi:Same error.
21:21 condy:geordi: int x; cout << TYPE(&x);
21:21 geordi:Same error.
21:21 sismvg:极黑好看（虐）
21:22 tsuki:condy: 加 {}
21:22 condy:geordi: << TYPE_DESC< int(&(*)())[5] >
21:22 geordi:pointer to a nullary function returning an lvalue reference to an array of 5 integers
21:22 condy:tsuki: thx.:)
21:22 condy:geordi: { int x; cout << TYPE(&x); }
21:22 geordi:rvalue int*
21:22 tsuki:极黑就看过漫画
21:23 condy:geordi: typedef void (*(*(*f[3])(int*, int, int (*)(const void*, const void*)))[3])(int*, int); { f x; cout << TYPE(x); }
21:23 geordi:error: expected unqualified-id before '{' token
21:23 condy:geordi: { typedef void (*(*(*f[3])(int*, int, int (*)(const void*, const void*)))[3])(int*, int); f x; cout << TYPE(x); }
21:23 geordi:lvalue void (* (*(* [3])(int*, int, int (*)(void const*, void const*))) [3])(int*, int)
21:24 condy:geordi: { typedef void (*(*(*f[3])(int*, int, int (*)(const void*, const void*)))[3])(int*, int); cout << TYPE_DESC<f>; }
21:24 geordi:array of 3 pointers to functions taking a pointer to an integer, an integer, a pointer to a function taking 2 pointers to constant void and returning an integer, and returning pointers to arrays of 3 pointers to functions taking a pointer to an integer, an integer, and returning nothing
21:24 condy:原来是这样用的啊。。。
21:25 condy:geordi: { int f(int (*)(), double (*)[3]); int f(int (*)(char*), double (*)[]); cout << TYPE_DESC<f>;}
21:25 geordi:error: parameter '<anonymous>' includes pointer to array of unknown bound 'double []'
21:26 condy:geordi: { int f(int (*)(), double (*)[3]); int f(int (*)(char*), double (*)[5]); cout << TYPE_DESC<f>;}
21:26 geordi:error: no match for 'operator<<' (operand types are 'ostream {aka ostream}' and '<unresolved overloaded function type>')
21:26 tsuki:噗
21:27 condy:geordi: { int f(int (*)(), double (*)[3]); int f(int (*)(char*), double (*)[5]); cout << TYPE<f>;}
21:27 geordi:Same error.
21:27 condy:...
21:28 condy:原来和C差别这么大啊。。。
21:28 tsuki:geordi: { int f(int (*)(), double (*)[3]); int f(int (*)(char*), double (*)[5]); cout << TYPE(<f>);}
21:28 geordi:error: template argument 1 is invalid
21:28 tsuki:geordi: { int f(int (*)(), double (*)[3]); int f(int (*)(char*), double (*)[5]); cout << TYPE(f);}
21:28 geordi:error: no context to resolve type of 'f'
21:30 xxxxxxxx joined channel
21:31 condy:geordi: { int i = 0; while (new (nothrow) char [1024 * 1024]) ++i; cout << i << " MiB"; }
21:31 geordi:493 MiB
21:31 condy:变大了。。。
21:36 tsuki:geordi: { int i = 0; while (new (nothrow) char [1024 * 1024]) ++i; cout << i << " MiB"; }
21:36 geordi:493 MiB
21:36 sheyu joined channel
21:36 sheyu left channel
21:41 Li_o joined channel
21:42 lhanjian joined channel
21:51 sismvg:原来的T 豆变成了豆票。。这下贴吧基本没得救了
21:56 randomclown joined channel
22:5 condy:tsuki: 我是个问题儿童，一直有问题。这个搞不懂了。
22:5 condy:tsuki: http://imagebin.org/307945
22:6 tsuki:xxoo.....
22:6 condy:叉叉圈圈。。。。。
22:7 tsuki:咦，不是都给了吗？
22:7 condy:给出一个a,b,..., oo, xx的一个排列使得那个值最小。
22:7 tsuki:哦，找两两距离和最小呀
22:8 condy:给出1....n的一个排列，使得那个值最小。
22:8 condy:还有个前提。。。
22:9 tsuki:就直接升序排序，然后两个两个取呗
22:10 condy:有时候d_b的限制会很大，可能会有不同的情况。
22:10 condy:前提里面的a,b,...,oo, xx也是要确定的。
22:11 T2:你排序了不就确定了么?
22:11 tsuki:某oi题吧
22:12 condy:tsuki: yeah。
22:12 tsuki:唯一解答还是有一个就行
22:12 condy:T2: 有前提的限制的呀.
22:12 T2:哦
22:12 T2:==
22:13 condy:tsuki: 有一个就行，不过有时候是不存在最优解的。
22:13 T2:对d1~n也排个序
22:13 T2:然后取对应
22:14 condy:P_a, d_a 是在一起的，不能分开的。
22:14 Guest73190 joined channel
22:14 T2:先排序{p, pa~xx}
22:14 T2:然后排序二元组.
22:14 T2:在排序d1~n
22:15 T2:然后把d1~n对应进二元组
22:15 T2:完毕
22:15 Guest73190 left channel
22:15 xxxxxxxx:豆票? 为啥不叫逗比?
22:15 T2:卧槽
22:15 T2:这么疼?
22:16 condy:T2: 没有明白。。。
22:16 tsuki:d不用排序吧，肯定是升序...
22:16 T2:那我再想想.
22:16 T2:tsuki, 不见得.
22:16 tsuki:那直接就报错了
22:16 T2:对对对
22:17 condy:要不把原题发上来？
22:17 tsuki:行
22:17 condy:ok。
22:17 condy:https://icpcarchive.ecs.baylor.edu/index.php?option=com_onlinejudge&Itemid=8&category=16&page=show_problem&problem=1350
22:17 T2:似乎够清楚了.
22:21 T2:我觉得这个已经实际到可以去查现有实现的地步了.
22:23 condy:...
22:23 tsuki:这确实是直接用现成算法，只不过不知道该用那个
22:24 condy:hope1`: 不是。
22:24 tsuki:b不重要
22:24 T2:condy, 你不能指望拍个脑袋就一下想出比经典解决方案更好的方案吧.
22:25 T2:hope1, 应该是同一个b
22:26 condy:T2: 说的对。可是不知道是怎么回事，把它放在初学者部分。23333
22:26 T2:虽然实际中转臂的"速度"是变化的.
22:26 tsuki:怎么可能是同一个b...
22:26 T2:tsuki, 取最慢速度
22:26 T2:得到最坏情况解
22:27 T2:保证最坏情况不会超过deadline
22:27 tsuki:我能想到的就是动态，不过这个数字太大了
22:27 tsuki:优化方面的算法不知道
22:28 tsuki:试试看无脑贪心
22:29 tsuki:可能数据简单呢
22:29 condy:tsuki: 怎么贪？
22:29 tsuki:取最短，然后去最短
22:30 condy:有了个deadline感觉不对。
22:33 tsuki:肯定不对，就是试试看
22:34 condy_ joined channel
22:35 tsuki:1/28的ac肯定不是简单题呀...
22:36 condy_:对呀。
22:37 zzzzzzzz joined channel
22:39 FrankHB joined channel
22:41 tsuki:问耻球
22:42 condy_:换爪机了。。。
22:43 condy_:help meeeeee.
22:43 xxxxxxxx:meee
22:44 tsuki:FrankHB: condy要你
22:45 condy_:hope1, 怎么搜出来的？google%
22:46 condy_:半天都没有结果。。。
22:46 tsuki:这应该就是(女)优 化的题吧
22:46 xxxxxxxx:幼(女)化
22:47 tsuki:幼化好评
22:47 tsuki:幼化纲领
22:47 xxxxxxxx:@糖化缸里_
22:48 tsuki:噗
22:49 tsuki:或者问 \q
22:50 condy_:\q 似乎一直away。。。
22:52 xxxxxxxx:印象中我曾经有一次标记away了之后自己都不记得 然后一直away下去...
22:52 tsuki:耗子，alpako，肉牛之类的
22:53 tsuki:反正问我就是着了....
22:55 tsuki:不太像吧
22:56 tsuki:顺便，boost真疼
22:57 condy_:到宿舍了。。。
22:58 menma:觉厉
22:58 xxxxxxxx:芦荟胶快来鉴定
22:59 tsuki:猛犸在哪里？
22:59 condy joined channel
22:59 xxxxxxxx:冰原?
23:0 menma:⊙ω⊙
23:0 xxxxxxxx:玛丽苏别管她 写得一手好枪文
23:3 tsuki:这是在讨论什么...
23:4 tsuki:会夹
23:4 tsuki_ joined channel
23:4 xxxxxxxx:这是一个女人被人说她用的东西不够好之后的怒吼
23:6 xxxxxxxx:顺带说一句 arch如果用户至上就该好好弄个安装镜像
23:13 zzzzzzzz:。。。。
23:15 zzzzzzzz:我在#archlinux-cn频道下午的时候看到直播了
23:17 xxxxxxxx:呵呵，世界第二大发行版已经告诉你了。说你对 openSUSE 不了解就是因为在高手的手里，openSUSE 灵活性比 Archlinux 强太多了，在新手的眼里，openSUSE 比 Archlinux 稳定太多了。 <- 在我眼里opensuse用户比arch用户2太多了
23:18 iyzsong:m.m
23:18 condy_ joined channel
23:18 xxxxxxxx:？要是哪个大牛教你天天滚，你趁早离他远点，那是颗伪核。现在滚动升级已经不是一个新鲜概念了，Arch 自己都在弱化这点，因为他们也知道滚了就有可能死，死了就有可能不用。用 Arch 不滚，跟 openSUSE 有区别么？ <- 有 arch党里没有MLGB苏
23:18 condy:好的。
23:20 zzzzzzzz:这也是这些年我能够平静接受 Arch/Gentoo 这些早年我看来非常反人类的系统存在、并与之和平相处的原因。因为本质上，我认识那人其实用的不是 Archlinux，是人家自己装的一套最适合自己电脑的系统，跟我电脑里的 openSUSE 没有任何区别。
23:20 zzzzzzzz:Arch怎么就反人类了。。。。
23:20 xxxxxxxx:http://bedrocklinux.org/ 以后谁让我推荐系统我就推荐这个奇葩
23:21 *zzzzzzzz 天天Syu都没挂过....
23:21 xxxxxxxx:再不济我推荐fedora 总之不推荐opensuse
23:22 zzzzzzzz:说你对 openSUSE 不了解就是因为在高手的手里，openSUSE 灵活性比 Archlinux 强太多了，在新手的眼里，openSUSE 比 Archlinux 稳定太多了。
23:22 zzzzzzzz:强烈不赞同
23:23 xxxxxxxx:我十分庆幸当年我选第一个linux系统的时候很怂的选择了ubuntu
23:23 xxxxxxxx:不然肯定被opensuse社区带成逗比了
23:24 hysw:哪天去装个openSUSE玩玩
23:24 hysw:顺带Minix
23:24 hysw:下午有代数考试... 果然要死了...
23:24 xxxxxxxx:你敢说 Archlinux 学会了一生不折腾么？Ubuntu 都没资格说吧，它 10.10 到现在就多了 Unity，到 16.04 又多个 MIR，真没资格。SUSE 9 的知识现在还能用，这就是老牌发行版。时间带来的是用户知识的深度，而不是广度。一般使用 openSUSE 只需要知道：
23:24 xxxxxxxx:1. 怎么装显卡驱动
23:24 xxxxxxxx:2. 怎么装多媒体解码器
23:24 xxxxxxxx:3. 怎么用桌面环境
23:25 zzzzzzzz:学霸云V587
23:25 xxxxxxxx:^王 根快来噗她
23:25 zzzzzzzz:Ubuntu都不止这些。。。。
23:25 xxxxxxxx:这里有顽固不化的*nix教徒
23:26 xxxxxxxx:opensuse用没用systemd?
23:26 hysw:M$没源代码可看...
23:26 zzzzzzzz:有很多连 MBR/ 分区都不懂甚至 Windows 都不会重装的人来我们社区，入门关很有可能过不了，在我们这儿折腾一遍后，去用 Archlinux 非常有可能成功，因为他已经知道不够细心不看权威资料就会收到六亲不认的计算机的惩罚。就跟折腾过 Ubuntu 的来我们这儿非常有可能一直用下去一样。
23:26 zzzzzzzz:这个就不评论了。。
23:27 lh_mouse joined channel
23:27 xxxxxxxx:很多连饭都没吃过的婴儿在我们这里折腾一番之后 你看他会喝奶了
23:27 xxxxxxxx:23333
23:28 condy_:hope1, 怎么在那里问呀？是直接说我有个问题？
23:31 xxxxxxxx:虽然我的 Arch Linux 如今已足够稳定了，除了定期手动更新，几乎没有折腾的余地了，我最爱用 i3, tmux, urxvt, zsh, Gvim, 全 CLI 流，操作效率高得快感绝顶，不知 openSUSE 是否也能定制成这样。<- Gvim....
23:32 xxxxxxxx:文档还是得指望的
23:33 zzzzzzzz:我还是觉得我现在啥都不知道，遇到问题就翻wiki...
23:33 xxxxxxxx:zzzzzzzz: 至少你还知道查wiki
23:34 zzzzzzzz:xxxxxxxx, 我还喜欢瞎折腾╮(╯▽╰)╭
23:34 xxxxxxxx:hope1`: 总之提供文档的是大爷
23:34 xxxxxxxx:不靠谱也得看
23:35 xxxxxxxx:差不多程度的大爷
23:35 zzzzzzzz:#archlinux-cn频道里下午有人评判挺到位的：<fixme> acgtyrant: 这是她的问题，但是起因是因为你的做法，我想表达的类似与“如果你真的想去贡献到openSUSE的社区，你可以做的更好，因为不是所有的人都是友善的，对同样话都有同样的理解，你的那篇帖子确有一些‘瞧不起人’的意思，你觉得自信的东西，别人有可能觉得就是‘自负’”
23:37 xxxxxxxx:早就说过传教的都是作死的
23:37 zzzzzzzz:@acgtyrant
23:38 xxxxxxxx:抓住一个x一个
23:38 zzzzzzzz:<fixme> acgtyrant: 但是我觉得，第一点，那帖子让openSUSE的社区维护者看起来就像是“嗟，来食”一样
23:38 zzzzzzzz:<fixme> acgtyrant: “我在Arch Wiki上写了一些针对中国用户特有的wiki条目，链接是xxxxx，希望也能帮到openSUSE的用户和社区的完善，也算兑现了我对玛格丽特・苏的承诺吧”
23:38 zzzzzzzz:建议改成这样
23:40 xxxxxxxx:我就说蜥蜴党过的太安逸了 真出问题的时候哪有那么多节操管什么发行版的文档
23:45 xxxxxxxx:http://tieba.baidu.com/p/3004738600 23333
23:50 xxxxxxxx:http://imgsrc.baidu.com/forum/pic/item/fb1921087bf40ad13659497c552c11dfa8ecce57.jpg <- 怎么想都是零翻译的错
23:54 T2:碎觉...真蛋疼...
23:56 lh_cat joined channel
