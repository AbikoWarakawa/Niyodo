00:08 lh_mouse quit:Read error: Connection reset by peer
00:23 lhanjian_: 原来irssi还是GC的
00:53 wlemuel quit:Quit: leaving
01:29 StardustX quit:Remote host closed the connection
01:34 lhanjian_ quit:Quit: Leaving
01:45 Stevearzh_ quit:Remote host closed the connection
02:54 Youmu quit:Quit: Connection closed for inactivity
04:45 Xilzzert joined channel
04:49 Xilzzerts quit:Ping timeout: 265 seconds
05:05 randomclown joined channel
05:08 Xilzzerts joined channel
05:10 Xilzzert quit:Ping timeout: 240 seconds
07:32 sleepwalking joined channel
08:17 linearain joined channel
08:19 cleamoon joined channel
08:25 linearain: hello
08:28 cleamoon quit:Read error: Connection reset by peer
08:28 cleamoon joined channel
08:37 cleamoon quit:Read error: Connection reset by peer
08:37 cleamoon joined channel
08:47 cleamoon quit:Read error: Connection reset by peer
08:48 cleamoon joined channel
08:50 hoxily joined channel
08:55 linearain quit:Quit: ChatZilla 0.9.92 [Firefox 42.0/20151029151421]
08:57 cleamoon quit:Read error: Connection reset by peer
08:58 cleamoon joined channel
09:06 cleamoon quit:Read error: Connection reset by peer
09:06 cleamoon joined channel
09:14 cleamoon quit:Read error: Connection reset by peer
09:15 cleamoon joined channel
09:24 cleamoon quit:Read error: Connection reset by peer
09:24 cleamoon joined channel
09:27 lh_mouse joined channel
09:32 hoxily quit:Quit: Leaving
09:32 cleamoon quit:Read error: Connection reset by peer
09:33 hoxily joined channel
09:33 cleamoon joined channel
09:36 libhanjian joined channel
09:36 libhanjian: 又开始划水的生活
09:36 cleamoon: 你可以做moha的生活
09:38 libhanjian: cleamoon, https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSfeMsY0Yw-6gi6Lt2LqZH2Uj4ykiXCKhkUNzuJPrqJ6WYNbgKu
09:41 cleamoon: 23333333
09:41 RivDo joined channel
09:41 cleamoon quit:Read error: Connection reset by peer
09:42 cleamoon joined channel
09:50 cleamoon quit:Read error: Connection reset by peer
09:51 cleamoon joined channel
09:59 cleamoon quit:Read error: Connection reset by peer
10:00 cleamoon joined channel
10:08 cleamoon quit:Read error: Connection reset by peer
10:09 cleamoon joined channel
10:11 xxxxxxxx joined channel
10:11 RivDo quit:Quit: Leaving.
10:14 libhanjian: cleamoon, 发现绅士一般都是GMT+8 9：30AM 比较活跃啊
10:15 libhanjian: 海盗国不是凌晨么？
10:15 cleamoon: 是呀
10:15 cleamoon: 我起床时你们都快睡了
10:17 cleamoon quit:Read error: Connection reset by peer
10:18 cleamoon joined channel
10:23 libhanjian: cleamoon, 你起床大概是GMT+8的中午下午吧
10:23 libhanjian: GM
10:23 cleamoon: +
10:23 cleamoon: 基本快晚上了
10:26 cleamoon quit:Read error: Connection reset by peer
10:26 cleamoon joined channel
10:34 cleamoon quit:Read error: Connection reset by peer
10:35 cleamoon joined channel
10:36 whatofor quit:Ping timeout: 250 seconds
10:36 whatofor joined channel
10:44 cleamoon quit:Read error: Connection reset by peer
10:45 cleamoon joined channel
10:48 sou_ joined channel
10:50 StardustX joined channel
10:53 cleamoon quit:Read error: Connection reset by peer
10:54 cleamoon joined channel
10:55 sou_ quit:Quit: Leaving.
10:56 lh_mouse quit:Read error: Connection timed out
11:00 lh_mouse joined channel
11:03 cleamoon quit:Read error: Connection reset by peer
11:03 cleamoon joined channel
11:11 cleamoon quit:Read error: Connection reset by peer
11:12 cleamoon joined channel
11:13 Youmu joined channel
11:20 cleamoon quit:Read error: Connection reset by peer
11:21 cleamoon joined channel
11:25 sleepwalking_ joined channel
11:26 sleepwalking quit:Ping timeout: 240 seconds
11:29 cleamoon quit:Read error: Connection reset by peer
11:30 cleamoon joined channel
11:30 condy quit:Ping timeout: 245 seconds
11:33 condy joined channel
11:38 cleamoon quit:Read error: Connection reset by peer
11:38 StardustX quit:Remote host closed the connection
11:39 cleamoon joined channel
11:48 cleamoon quit:Read error: Connection reset by peer
11:48 cleamoon_ joined channel
11:57 cleamoon_ quit:Read error: Connection reset by peer
11:58 cleamoon_ joined channel
12:06 cleamoon_ quit:Read error: Connection reset by peer
12:07 cleamoon_ joined channel
12:15 cleamoon_ quit:Read error: Connection reset by peer
12:15 cleamoon_ joined channel
12:23 cleamoon_ quit:Read error: Connection reset by peer
12:24 cleamoon_ joined channel
12:33 cleamoon_ quit:Read error: Connection reset by peer
12:33 cleamoon_ joined channel
12:41 cleamoon_ quit:Read error: Connection reset by peer
12:42 cleamoon_ joined channel
12:51 cleamoon_ quit:Read error: Connection reset by peer
12:51 cleamoon_ joined channel
12:54 xxxxxxxx: cleamoon_: 幼女喜欢玩i wanna?
12:55 cleamoon_: xxxxxxxx, +
12:56 xxxxxxxx: cleamoon_: 快来玩teeworld
12:56 xxxxxxxx: s
12:56 xxxxxxxx: 漏了s
12:56 cleamoon_: xxxxxxxx, 那个类似百战天虫的？
12:57 xxxxxxxx: 只是看上去低龄化...
12:57 cleamoon_: soga
12:57 xxxxxxxx: https://www.teeworlds.com/
12:57 cleamoon_: 我试试
12:59 xxxxxxxx: DDRace模式基本上就是操作闯关...
13:00 dfceaef- joined channel
13:00 xxxxxxxx: 你可以发展几个队友和你一起玩 很多都是要队友帮忙才能过的图
13:00 cleamoon_ quit:Read error: Connection reset by peer
13:01 cleamoon_ joined channel
13:01 xxxxxxxx: cleamoon_: 12:59:27 xxxxxxxx>DDRace模式基本上就是操作闯关...
13:02 xxxxxxxx: 12:59:55 xxxxxxxx>你可以发展几个队友和你一起玩 很多都是要队友帮忙才能过的图
13:02 cleamoon_: soga
13:02 cleamoon_: 基王在玩？
13:04 xxxxxxxx: 这段时间在玩
13:05 Stevearzh joined channel
13:05 Stevearzh quit:Changing host
13:05 Stevearzh joined channel
13:05 cleamoon_: 我这两天试试
13:09 cleamoon_ quit:Read error: Connection reset by peer
13:10 cleamoon_ joined channel
13:13 hoxily quit:Ping timeout: 272 seconds
13:17 cleamoon_ quit:Read error: Connection reset by peer
13:18 cleamoon_ joined channel
13:27 cleamoon_ quit:Read error: Connection reset by peer
13:27 cleamoon_ joined channel
13:28 Dove joined channel
13:34 libhanjian: 轻国亡了
13:34 libhanjian quit:Quit: Leaving
13:34 libhanjian joined channel
13:35 libhanjian: 鹅厂牛逼啊
13:35 xxxxxxxx: cleamoon_: 我刚才去看了下DDrace 我寸步难行...
13:35 cleamoon_ quit:Read error: Connection reset by peer
13:36 xxxxxxxx: libhanjian: 老红军玩这个不? https://www.teeworlds.com/ 
13:36 libhanjian: 没精力玩
13:36 cleamoon_ joined channel
13:36 sleepwalking_ quit:Ping timeout: 240 seconds
13:37 Dove: 失恋了，求安慰啊。
13:38 Dove: 话说找工作要学点啥？我差不多该准备准备了。
13:43 hoxily joined channel
13:44 cleamoon_ quit:Read error: Connection reset by peer
13:45 cleamoon_ joined channel
13:51 varna joined channel
13:53 cleamoon_ quit:Read error: Connection reset by peer
13:54 cleamoon_ joined channel
14:02 cleamoon_ quit:Read error: Connection reset by peer
14:02 xxxxxxxx: http://www.bilibili.com/video/av3427034/
14:03 cleamoon_ joined channel
14:03 xxxxxxxx: 金坷垃
14:04 varna: xxxxxxxx: 爆
14:05 varna: xxxxxxxx: 上周日本来想找你玩FL的，结果后来你没上线？
14:05 libhanjian: varna, 药丸药丸 大轻国完了
14:05 varna: libhanjian: 轻国怎么了
14:06 lh_mouse: [14:05:03] <varna> xxxxxxxx: 上周/日本/来想找你玩FL的，结果后来你没上线？
14:06 libhanjian: 【双流警方破获全国首例网络轻小说侵犯著作权案】历时俩月，双流警方在省市公安及文化部门支持下，辗转杭州、漳州、合肥、武汉，查实网站“轻之国度”“轻之文库”刊载了未经日本版权方授权的近万部网络轻小说，侵犯了国内已获授权公司的合法权益。团伙成员林某等已被依法逮捕，该案正在进一步侦查中。 
14:06 libhanjian: varna, 
14:06 varna: 哈哈哈哈哈哈哈哈哈哈哈哈
14:06 varna: 假新闻么
14:06 libhanjian: 双流警方的官方微博
14:07 varna: 噗
14:07 Youmu: ，，，
14:07 libhanjian: http://weibo.cn/comment/D9IwnBroP
14:07 varna: 群众评论：“ 形势严峻啊 我tm又卜是sb”
14:08 varna: 2333333333
14:08 xxxxxxxx: varna: 我之前看羊驼没爬上来还以为羊驼又有事情然后我就撤了
14:09 varna: ...
14:09 varna: 等下，我怎么看人说是疼迅要卖轻小说了
14:10 varna: 以后我是不是该直接订台湾角川的……
14:11 libhanjian: 腾讯今年购买了电子版权
14:11 libhanjian: 基本上这事儿和抓珊瑚虫作者是一个性质
14:11 cleamoon_ quit:Read error: Connection reset by peer
14:12 cleamoon_ joined channel
14:12 varna: 疼迅总之除了把事情搞黄之外没什么贡献，以后看到有值得收藏的作品还是直接入正吧，其余不看也罢
14:12 xxxxxxxx: 国产航母专用"奶妈"下水 目前只有美军装备
14:13 xxxxxxxx: 这算标题党不?
14:13 varna: 大概算
14:13 varna: 后一句我没看不懂是什么意思，是只有美军部署了这个还是只买了美军装备
14:13 varna: 大概是前者吧
14:14 libhanjian: 入正or不看也罢 +
14:14 libhanjian: 好在无论如何台角总还是会有的
14:15 varna: 台角我觉得还是比天闻好
14:15 libhanjian: 虽然正版书很贵很贵
14:15 varna: 虽然贵，不过值得收藏的作品基本没有，所以大丈夫
14:15 varna: 想撸可以看《源氏物语》嘛
14:15 varna: 那个撸点很赞的
14:16 varna: 只要别动念去想什么黑牙，对着诗文撸也很雅致
14:16 xxxxxxxx: http://puu.sh/m5Gpg/e2eeef42e6.png 坐等这位快递上门
14:16 varna: 这位是脑残吧
14:17 xxxxxxxx: 八成
14:17 varna: 《本草》都说了，“故脑残者无药医也”
14:19 xxxxxxxx: http://www.bilibili.com/video/av3434977/
14:21 cleamoon_ quit:Read error: Connection reset by peer
14:21 cleamoon_ joined channel
14:24 varna: 两发低保下去5h+4h, 惨不忍睹
14:25 Dove quit:Quit: KVIrc 4.2.0 Equilibrium http://www.kvirc.net/
14:30 cleamoon_ quit:Read error: Connection reset by peer
14:39 Mokou joined channel
14:40 Mokou: 钓鱼居然钓上来一只小耗……
14:41 varna: 这红旗又痛〇？
14:41 Mokou: 你痛〇，我拉肚子
14:41 varna: 我蛋疼，今天的大建又失败了
14:41 Mokou: 跟班主任说了一下，班主任看下午还剩两节英语和英语晚自习就让我回来了
14:41 lh_mouse: 喵。
14:41 varna: 英语啊
14:42 varna: 现在山东英语还是自主命题的？
14:42 Mokou: 全国卷了
14:42 Mokou: 没有单选轻松愉快
14:43 varna: 单选挺简单吧
14:43 varna: Lag 27.41...
14:43 varna: 全国卷我记得有个什么改错题？
14:43 Mokou: 短文改错，十个错
14:44 Mokou: 只有形式和添词漏词问题
14:44 varna: You mad? You mad?  # Correct: You get mad? You get mad?
14:45 libhanjian: 卧槽，我随手一看日期，已经公历年底了！
14:45 Mokou: Hey buddy I think you've get wrong door
14:45 libhanjian: lh_mouse, 小耗怎能喵？
14:45 varna: 这法师，简直“乃不知有岚，无论齐柏林”
14:46 varna: libhanjian: @吃猫鼠
14:46 Mokou: 明明有阿拉西
14:46 libhanjian: varna, 乃不知有shopping，何论虎蛤
14:48 libhanjian: 自云先世避三年困难时乱，率全大队来此绝境，不复出焉，遂与天朝间隔。问今是何朝，乃不知有凳，何论虎蛤
14:48 libhanjian: varna, 
14:48 varna: 故说咒曰：图样图样，图样图森破，图样图森破啊，桑太拿衣服
14:49 varna: 哦对，秋活结束之后不是送了个魔哈挂轴么
14:49 varna: 我截个图
14:50 varna: http://picpaste.com/YShrq6v5.png
14:50 varna: 上面写的字，可以意译：“得罪你们一下！”
14:50 varna: libhanjian: ^
14:50 Mokou: 噗噗噗
14:50 Mokou: 江
14:51 libhanjian: 这是极好的
14:51 Mokou: 你感到非常气氛
14:51 Mokou: 家具币终于破140k了
14:51 Mokou: 现在141160
14:51 varna: 我只剩30k+
14:52 Mokou: 我看看能不能屯到200K
14:53 varna: 今天我似乎摔到了很样很森破的少将区
14:54 varna: 看到一个3-2练十级摩耶不带战舰的哥们，干了他两次
14:54 Mokou: 一直少将区
14:54 varna: 少将区还分两种
14:54 varna: 一种是颓废的大将，一种是新米
14:54 * Mokou 新米
14:55 varna: 这月我只剩117点继承战果了
15:00 libhanjian: 写下了“惜习蛤蛤”四个打字
15:01 varna: 你这有点作死啊
15:01 varna: 快，吃点肝
15:02 varna: Mokou: 对了，你最后打算怎么搞？还是vfork?
15:03 Mokou: varna: 我没想出啥其他办法……
15:04 varna: 要写C wrapper么
15:05 varna: 手一滑，敲了个perl vfrok...
15:05 varna: 你们这些法师把我污染了
15:06 libhanjian: forg
15:06 libhanjian: 以后org都会打成rog
15:07 varna: 我本来是挺好一个青年
15:07 varna: 结果现在变成这鸟样
15:07 varna: 药丸啊
15:08 libhanjian: 你明明就是隐藏在羊群中老膜法师
15:09 varna: 我是信春哥的，不会什么膜法！
15:10 varna: 看来Perl的vfork确实要写wrapper
15:10 varna: 非标准的东西也没有自带的接口
15:10 varna: 然后IPC还是个要考虑用什么的问题
15:11 libhanjian: varna, http://tieba.baidu.com/p/3142273927 高调拜春，低调膜蛤
15:11 libhanjian: varna, 什么东西的IPC？
15:12 varna: libhanjian: 就是常见的进程间通信，红旗要弄个make代用品
15:12 libhanjian: 哦
15:13 varna: 所以得满足-j8需求
15:14 varna: 我看看perldoc perlipc
15:15 libhanjian: 还是直接网络吧
15:15 libhanjian: 方便以后分布式j8
15:20 xxxxxxxx: 14:44:04 varna>You mad? You mad?  # Correct: You get mad? You get mad? <- 我想到那个"又干妹 又干妹"的铃声
15:22 xxxxxxxx: http://pan.baidu.com/share/link?shareid=435584&uk=2670430219  铃声本体这里似乎有
15:25 varna: libhanjian: 分布式j8显得有点蛋疼，虽说确有道理
15:26 varna: xxxxxxxx: 爆
15:27 varna: 看了一眼介绍，我感觉巨蛋疼
15:27 libhanjian: varna, 而且我觉得用起来的角度来说，本机的tcp和其他的什么差别都不太大。
15:27 libhanjian: 而且限制还少
15:27 varna: perlipc章节上来就是管道，然后就是TCP, 之后就是socket API
15:27 varna: 那看起来跟系统V共享内存折腾也没什么意思
15:28 libhanjian: 本机的话，用共享内存纯属蛋疼吧
15:28 libhanjian: 除了少部分性能敏感的场景？
15:29 varna: 实际上那少部分也可以考虑拐个弯mmap, 因为这里不涉及到按名存取共享内存块的问题
15:30 varna: 而系统V的IPC出来的对象大多内核对象，弄不干净就真的不干净了
15:30 varna: 很WU的
15:30 libhanjian: 用mmap基本上是相当于自己实现一个共享内存吧
15:30 varna: mmap方便
15:30 Stevearzh_ joined channel
15:30 varna: 旧UNIX的东西大多都一副熊样
15:30 libhanjian: 那会的C实现都奇奇怪怪，能用就不错了
15:31 varna: +1
15:31 varna: 不太开化
15:32 varna: 旧时代最开化的东西还是Perl
15:32 libhanjian: 但是实现太坑了
15:32 libhanjian: 以至于文档都拿不出来
15:32 varna: 垃圾活火山
15:32 libhanjian: cpan吃了螃蟹，又变成个垃圾堆遗址
15:32 varna: 持续喷发，每个主版本一次
15:32 Stevearzh quit:Ping timeout: 276 seconds
15:32 varna: CPAN最大的坏处是不提供有管理的删除
15:32 condy: owo
15:32 varna: 你可以按依赖安，但必须手工删……
15:33 varna: 然后perl每个主版本更新，所有的xs都要爆炸
15:33 varna: 我家那欠雪下一次爆破估计是5.24
15:34 libhanjian: 昨天才知道，irssi竟然用了gc
15:35 varna: +
15:35 varna: 其实你可以这么弄，把所有C对象都包进perl
15:35 varna: 然后写一套tie, 就可以gc了
15:35 varna: 反正客户端，对性能要求不那么高
15:35 libhanjian: 还不如包进gopher，至少方便hack golang实现
15:36 varna: 你说得如此有道理，我竟无言以对……
15:36 libhanjian: 其实gc性能不差吧，只是最慢的时候太慢了
15:36 varna: gc统计上需要多一些的内存
15:36 libhanjian: 哦，对
15:36 varna: 主要问题其实是强制gc导致实时性能彻底不可控
15:36 varna: 锅不是gc, 是强制gc
15:37 libhanjian: 我记得那本gc的书上说，gc其实比rc和手动在管理内存上的速度都快，但是没有多少很摊销又不增加很多开销的算法
15:38 libhanjian: 不过感觉对C来说，上gc好像也规避不了自己作死out 哦分
15:39 libhanjian: out of bound 或者 pointer  arthmatic出错
15:39 varna: arith
15:39 varna: gc比手工快简直无稽之谈……
15:39 libhanjian: arithmatch
15:39 varna: ....
15:39 varna: match23333
15:39 libhanjian: matic
15:39 condy: metic
15:39 libhanjian: 刚在写string.match
15:39 varna: gc堆的管理办法和一般用户堆不一样的
15:40 libhanjian: 随手一搞就233了
15:40 varna: 为什么就不肯面对这种现实呢
15:40 varna: 你指望一个普通用户堆处理对象老化和分层么
15:40 whatofor quit:Ping timeout: 272 seconds
15:41 Mokou: 不过不强制GC的话应该怎么来
15:41 Mokou: smartptr?
15:42 varna: 提供一个可选的托管堆，然后这个堆出来的类型可以是单子的……
15:42 libhanjian: Mokou, 那个是RC
15:42 varna: 聪明指针不是gc向的
15:43 varna: 只是用来辅助作出duration
15:46 varna: Mokou: 所以现在你要用Perl提供的API, 还是封一套C的？
15:46 varna: https://metacpan.org/pod/release/EXODIST/Symbol-Rename-0.000002/lib/Symbol/Rename.pm wow!
15:47 varna: 虽说我觉得在Perl里显式写出名字空间也是好习惯
15:47 varna: 不过看到B物还是推荐一下
15:48 Mokou: 先用Perl的吧，等有需求再封
15:48 varna: (｡･ω･)ﾉ
15:52 condy: （╯°□°）╯︵ɐʌɐɾ
15:55 Mokou: 话说昨天我才发现有个叫Anglish的玩意……
15:55 varna: Angrilish
15:56 Mokou: uccu
15:56 Mokou: 他们试图恢复英语的日尔曼血统……
15:57 varna: 那按E赛艇的事情怎么办
15:58 Mokou: 他们感到非常气愤，觉得这是一派胡言
15:58 varna: (｡･ω･)ﾉ哦瘊瘊
16:00 Mokou: http://anglish.wikia.com/wiki/World_War_Two 像是这样的东西
16:02 varna: 看着也还行
16:02 Mokou: 可以玩玩
16:02 Mokou: 虽然我觉得单词不够长
16:03 varna: 我先下个直钩钓鱼
16:05 whatofor joined channel
16:09 varna: IO::Epoll这坨悲剧
16:09 varna: "When successful, epoll_wait returns a reference to an array of events." # 不给我挂的用户数据，强行要索引因此
16:09 varna: 一次*
16:10 Mokou: ……
16:10 libhanjian quit:Remote host closed the connection
16:11 Mokou: 好像很多语言的FFI都不管什么用户数据
16:11 Mokou: Python的epoll也是
16:13 varna: 蛋疼，Linux::Epoll也怪怪的
16:13 varna: 总感觉这些写usage的人都没想过到底怎么用epoll的用户数据
16:16 varna: 我拖这个代码下来看看
16:18 varna: 直接封的，然而偷工减料……
16:18 libhanjian joined channel
16:24 varna: Mokou: 要不你直接用AnyEvent算了
16:26 Mokou: 那也行
16:26 Mokou: 以后封一下Agano
16:27 varna: 不想写wrapper的原因是测试太蛋疼
16:27 varna: 不过也许高兴了我就弄一个简单的epoll wrapper方便下
16:28 varna: 毕竟复杂的东西很多都有人做了，但缺个烧红砖的
16:28 Mokou: OTL
16:29 Mokou: http://ww1.sinaimg.cn/bmiddle/78f2cc43gw1ez9ip8yo24j20c20kndgo.jpg
16:29 varna: RETVAL = "0 but true"  # 233333333333333333333333333
16:29 * varna 笑尿
16:29 Mokou: 233333333333333
16:29 Mokou: 真有人用这招啊
16:29 varna: 真用了，因为要回一个合法的0
16:29 Mokou: 666666666
16:30 iyzsong: 0 0
16:32 varna: [varna@shiki p7]$ perl -e 'my $a = "aya"; $a++; print "$a\n"'
16:32 varna: ayb
16:32 varna: ayb problem exists still
16:32 varna: \大胜利/
16:32 Mokou: 6666
16:33 varna: [varna@shiki p7]$ perl -e 'my $a = "ayz"; $a++; print "$a\n"'
16:33 varna: aza
16:33 varna: [varna@shiki p7]$ 
16:33 varna: 它进位了！
16:33 Mokou: 神奇的perl
16:33 varna: zzz自增得aaaa
16:33 varna: 太6了……
16:35 Mokou: 但是"0 but true"自增得1……
16:35 condy: lol
16:35 condy: 0 0
16:35 varna: 因为'0 but true'能按优先的规则parse出来
16:36 Mokou: 有没有可能造出一个自增前后都得0的玩意？
16:36 varna: 不能，一些看起来奇怪的东西就是0
16:36 varna: 然后增了得1
16:36 Mokou: 残念
16:37 Mokou: 您好，很高兴的通知您，您在c++吧提交的小吧主申请已被吧主LH_Mouse_Ex通过,请您认真阅读并遵守吧主制度
16:37 Mokou: 我才发现这消息里第一个的
16:37 Mokou: “的”
16:38 varna: 毕竟贴吧
16:42 varna: NKC的袋子把窗口全挡住了
16:42 varna: GJ
16:42 Mokou: ……
16:43 libhanjian: 辣鸡贴吧
17:00 varna: 奇怪了，为什么这些多路复用都假设一旦IO就绪了就要立刻执行回调呢……
17:00 varna: 排个队的机会都不给
17:04 libhanjian: 也许是考虑掉可以自己通过执行回调来实现排队吧？
17:04 libhanjian: 考虑到
17:04 Youmu quit:Quit: Connection closed for inactivity
17:05 varna: 然而不是很蛋疼么
17:05 varna: 明天弄个强行出队列，只管通知不管执行的epoll wrapper正片
17:06 Mokou: 項目描述：一隻黃色的「橡皮鴨」洗澡玩具。當對象把項目當成活生生的擬人化鴨子般的向它詳細解釋一個切實的問題時，他們會覺得自己更加理解所說的問題，並經常能馬上想出解決方法。
17:07 Mokou: 这个鸭子好
17:07 Mokou: 我看看能不能问基金会要过来
17:08 varna: 我有一个陆用小黄鸭，不过平时这么解释的时候其实是跟桌上的KTKM说的
17:08 Mokou: 去找你的小女朋友
17:09 varna: 并没有什么女朋友，然而有KTKM
17:11 libhanjian: 看来mmap实现共享内存竟然还是唯一的无系统调用（不在每次通信时）进程间通讯方案？
17:12 varna: 至少在我知道的范围内
17:13 libhanjian: 我记得有个库在这上面封了一套完整的流式通信协议，死活想不起来名字了
17:14 varna: libpainlessone
17:14 varna: libpainlessonestream
17:14 varna: 这样吧
17:15 libhanjian: 233
17:15 libhanjian: 按照cat-v那帮伙计，应该叫suckless？
17:15 varna: 毕竟无痛人流
17:17 libhanjian: 想起来，好像还是要用futex
17:17 libhanjian: 啊
17:17 libhanjian: （强行面包店算法
17:17 varna: 来个wutex
17:18 libhanjian: 这个名字好
17:20 condy: 233
17:23 libhanjian: 感觉还是蛋疼的，没了系统调用，也就没办法把它塞到epoll里去了= =
17:24 libhanjian: 没了系统调用，也就意味着用不着fd，也就没的东西可以塞到epoll里了
17:24 varna: 不蛋疼
17:25 varna: 你可以配套一个管道
17:25 varna: 现在p7的内部报文就是这样，一个非阻塞管道通信加上走内存的二进制报文
17:25 libhanjian: varna, 我知道。可是管道太糟糕了
17:25 varna: 没办法，反正IO也是一个德行
17:25 varna: 多少都要挂epoll的话，也没什么太污的，反正就少两个fd
17:26 libhanjian: 我其实还是在思考上次那个问题，怎么能让两个reactor更高效点地共用
17:26 varna: 干翻其中一个的作者，删了他的仓库，然后清算所有的fork
17:26 libhanjian: 啊？
17:26 varna: 我觉得共用本身就不好
17:26 libhanjian: 也不是共用
17:27 libhanjian: 就是说，羊驼子这个东西出来以后，一开始肯定用户不多。也就没有很多库的支持。但如果能够和其他的现有的东西高效地通信，那就能复用些东西了。
17:28 libhanjian: （系统调用嫌他有损耗，没fd又嫌他不能被通知= =
17:28 varna: 这东西本身就不高效，用户不会多的
17:28 varna: 而IO我坚持认为，一家管了就别来第二个
17:29 varna: 事越清淡越好
17:29 libhanjian: 这玩意儿还是比较高效的吧？
17:29 libhanjian: 大概还是比one thread one connection高效？
17:29 varna: 别跟那个比，黑太狠
17:32 libhanjian: AFK
17:33 libhanjian: back
17:33 varna: 好快
17:34 libhanjian: 搞什么活动，结果一股子难闻的气味，就回来了
17:35 libhanjian: varna, 其实还没明白为啥不高效
17:35 varna: 缓存杀
17:35 libhanjian: 哦，对。协程的致命伤。切来切去就是疼
17:36 varna: 小地方的复杂度可以修修补补，这个始终不行
17:36 varna: 所以不能用来做压力大的东西
17:37 libhanjian: 是啊。golang在这方面也还是难堪大用，就算没gc
17:37 varna: interface{}
17:38 libhanjian: 不过总感觉不太对。只要能让他横向扩展的话，conn/thread也能忍。这么多年来，渣渣apache不也过来了么
17:38 libhanjian: （虽然渣不是apache的锅
17:39 varna: 然而阿帕奇基金会强行搞黄的代码打印成B5纸双面可以供一个成年男子上几年厕所？
17:39 libhanjian: interface{} interface{} interface{}
17:41 libhanjian: 啊啪嘘基金会
17:41 varna: 23333
17:49 xiongmao86 joined channel
17:51 libhanjian: p7还有按命发送给特定的coroutine 啊
17:51 libhanjian: 按名
17:53 varna: 新功能
17:53 varna: https://pastebin.mozilla.org/8855141 代码极丑
18:07 libhanjian: 原来羊驼子这个还可以自定义分配起
18:07 libhanjian: 器
18:08 varna: servcraft的全部结构都不自带分配器
18:09 varna: 不过p7和s1的分配器是单态的
18:09 libhanjian: 单态？
18:09 varna: 用的时候都是__auto_type allocator = p7_root_alloc_get_proxy();
18:10 varna: 这函数出的是个结构字面量，不是指针
18:10 varna: 代理了后面唯一的一组分配器（函数指针风格或者闭包风格，看初始化）
18:11 varna: 也就是说，存在多个无关紧要的代理，以及一个实际工作的对象
18:11 varna: 这不算singleton, 姑且叫做monostate
18:12 Mokou: http://ww2.sinaimg.cn/bmiddle/6529fdc0jw1ez9f13ve9tj20zk0qo0z2.jpg http://ww4.sinaimg.cn/bmiddle/6529fdc0jw1ez9f14wp3bj20m80got9y.jpg
18:12 Mokou: 【热烈祝贺上海东方明珠电视塔发射成功！】 原计划11月就将发射的东方明珠电视塔，由于天天下雨未能升天。经过上海及周边城市通力合作，终于克服各种困难在12月23日早晨发射成功，这是我国环保事业的又一重大突破！ 同时发射成功的还有环球金融中心和上海中心。
18:13 varna: util里面被迫自己管内存的东西需要初始化每结构一个的分配器代理
18:13 varna: 不管内存的（比如rbt）就无所谓了
18:16 condy: https://www.zhihu.com/question/38797855#answer-26690441
18:16 condy: 大清国果然变得这样了（
18:16 varna: 国内哪些版权公司受到侵害? # 233333333333
18:18 Mokou: 2333333
18:20 libhanjian: 醉了
18:21 libhanjian: http://ww1.sinaimg.cn/bmiddle/a68d6077jw1ez9ohyi4vlj20gm0gy76v.jpg
18:21 xiongmao86 quit:Remote host closed the connection
18:21 libhanjian: 老想搞两个大新闻
18:21 libhanjian quit:Quit: Leaving
18:22 varna: http://tieba.baidu.com/p/4229521149 我竟不知道该如何嘲讽
18:23 varna: 压鲸不如日POI POI小脸直抢地 支援都反潜 跪舔防空姬 # 《新活动道中》
18:23 Mokou: http://ww4.sinaimg.cn/bmiddle/8edc8053gw1ez9kyejtevj209f0e1go6.jpg 日本一网友分享了自己第一次做饭的喜悦~
18:23 varna: 卧槽那是重油还是老抽
18:24 Mokou: 说不定是咖喱
18:24 Mokou: 或者是在煮屎
18:24 varna: 我知道了
18:24 varna: 罐头爆炸
18:25 varna: 想想那个全身防护服在厕所里吃罐头的日本青年
18:26 xiongmao86 joined channel
18:31 Xilzzerts: 微波炉转榴莲
18:31 iyzsong: orz
18:32 varna: 噫，现充在和噫噫噫吃浪漫的烛光晚餐
18:33 iyzsong: 谁 我去砍了他
18:34 varna: 233song!
18:35 xiongmao86 quit:Remote host closed the connection
18:36 Mokou: iyzsong: 给你刀，自行了断吧
18:36 Mokou: 来个十文字切
18:37 varna: 不浪漫
18:37 varna: 给个彗星
18:38 Mokou: 让噫噫噫介错就浪漫了
18:38 varna: 623A+C 绝息斩
18:38 varna: 斩下去六根清净
18:44 varna: http://www.bilibili.com/video/av2341132/ 我怎么不知道有这么个新歌……
18:45 pocmon joined channel
18:45 pocmon quit:Changing host
18:45 pocmon joined channel
19:14 code_new joined channel
19:15 varna: code_new: 爆
19:15 code_new: varna: 肛
19:15 varna: uccu
19:15 code_new: cool
19:15 iyzsong: ...
19:16 varna: gay
19:16 code_new: ^varna
19:16 Mokou: 你们居然都是gay
19:16 Mokou: 好恶心好震惊
19:17 varna: 这药娘
19:17 code_new: 这药娘
19:17 Mokou: 然而我不是药娘
19:20 code_new_ joined channel
19:20 code_new quit:Read error: Connection reset by peer
19:20 code_new_ is now known as code_new
19:23 varna: 下午那个5h造好了，是陆奥
19:26 code_new: MNB射击
19:28 libhanjian joined channel
19:30 libhanjian: varna, Mokou, 膜法师们好
19:31 code_new: libhanjian: 揉
19:31 varna: (｡･ω･)ﾉ
19:31 libhanjian: code_new, 捏妞妞
19:31 varna: libhanjian: 要不要试试用p7作个死
19:31 libhanjian: varna, 作个什么死呢？
19:32 varna: 不知道咧
19:33 libhanjian: http://ww1.sinaimg.cn/bmiddle/a68d6077jw1ez9ohyi4vlj20gm0gy76v.jpg
19:33 varna: 你们不要作死
19:33 varna: 搞个大新闻
19:34 libhanjian: 把我吓鸟了
19:36 libhanjian: varna, 这么一想好悲剧，原来网络也没啥可作死的
19:36 varna: 因为能作的死挺多，但是别人都做过了，所以只要别想着搞个大新闻……
19:37 libhanjian: varna, 我也知道大家都做过死了。但是好歹可以想个办法把某几个死坐一块儿啊
19:37 varna: 我仍然反对这个念头
19:37 libhanjian: 我先试试看能不能编译通过= =
19:37 varna: 只有自然才能合作，然而IO即使自然也没法合作
19:38 varna: libhanjian: 别试根目录下那个makefile
19:38 varna: 那是骗人的
19:38 varna: 真正的makefile需要用build.pl生成
19:38 libhanjian: 不要不要。我偏要用通信代替本地调用（坐地撒娇抹眼泪
19:39 varna: 其实我觉得根源问题在于多数IO事件库替用户做了太多事情
19:39 varna: 结果用户用久了就觉得碍事
19:40 libhanjian: 我知道羊驼子想提供一个能直接  hey_guy_make_this_coro(read(1, arr, size))
19:40 varna: 还真不是
19:40 varna: 我只提供并发的控制流
19:40 varna: 而IO监管只是不得不做的
19:41 varna: 不然阻塞IO需要手写一整套东西，而且真正地破坏库的开闭
19:41 varna: 最理想的情况是用户说读就读、说写就写，然而这个在现有的C上单纯做不到，所以我做
19:41 libhanjian: 说读就读？
19:42 varna: 不需要封装
19:42 varna: 但每个行为都是用户如同在串行环境下一样指定的
19:44 varna: 最理想的并发实现应该只变化控制流，然而这对库来说总之是做梦
19:46 varna: 或者更做梦地说，应当如同写在草稿纸上的并发一样随意
19:47 libhanjian: 话说这样子编译的库，我怎么链接起来？
19:47 varna: 正常地动态链接，你可能需要改名或者做链接
19:48 varna: 真实的so习惯用三部分的版本号，不过实用的时候可以用一个链接做过去，去掉版本细节
19:48 varna: 当然，这就是dll地狱
19:49 varna: 我自己用的别名就是libp7.so, 链接命令-lp7
19:54 pocmon1 joined channel
19:55 pocmon quit:Ping timeout: 272 seconds
19:56 libhanjian: 然后在我用LD_LIBRARY_PATH引入这个so之后，我在atoi()就吃了segmentfault
19:57 varna: 为何要用这种鬼畜玩意……
19:57 varna: 你试着强行dlopen呢
19:59 libhanjian: libp7.so.0.3.0编译成功，然后我编译了https://pastebin.mozilla.org/8855141这个main.c（通过-lp7 -L$PWD)
19:59 libhanjian: 再用LIBRARY_PATH，告失败
19:59 varna: 你做过符号链接了？
20:00 varna: 库的全名是不能拿来直接链接的
20:00 libhanjian: ln -s libp7.so.0.3.0 libp7.so
20:00 libhanjian: 有的
20:00 varna: 奇异
20:00 varna: 我试试
20:00 libhanjian: 看起来是调用库函数挂了
20:03 varna: 我这里没问题
20:04 libhanjian: 醉了。羊驼子把从build.pl开始的完整的编译过程给我看下吧
20:05 varna: cd p7; ./build.pl; make
20:05 varna: 这里我们得到了so对吧
20:05 varna: 然后在测试目录下
20:05 varna: ln -s libp7.so.0.3.0 libp7.so
20:05 varna: [varna@shiki test]$ gcc -o iccdemo2 iccdemo.c -L$PWD -lp7 -g -O2
20:05 varna: [varna@shiki test]$ LD_LIBRARY_PATH=".:"$LD_LIBRARY_PATH ./iccdemo2 2
20:05 varna: 这是个运行的例子
20:06 libhanjian: 成了。看起来是因为我没给iccdemo2 加！参！数！！！
20:06 varna: 6
20:07 varna: 那个参数是p7使用的内核线程数，至少1
20:07 varna: 1的意思是包括起始线程在内
20:07 libhanjian: 是我二了，代码都没看
20:08 varna: 我自己经常在自己的demo上这么2
20:08 varna: duang一声就炸了，然后跟进去，发现参数没给全，然而我写demo从来也不查argc
20:08 whocares_2 quit:Remote host closed the connection
20:08 libhanjian: 果然太久没写C鬼畜，看到atoi(argv[1])竟然毫无反应了
20:09 varna: 可以试试从1开始的几种参数
20:09 whocares_2 joined channel
20:09 varna: 串行和真并发，应该都能看到两条消息被收到了
20:09 libhanjian: 我先玩下上次的那个block statement
20:09 libhanjian: extension
20:09 varna: (｡･ω･)ﾉ
20:09 varna: clang么
20:09 libhanjian: 这样就不用把atoi拆出来多写几个分号了;
20:09 libhanjian: 不是，上次那个gcc extension
20:09 varna: 哦，({ })啊
20:09 varna: 语句表达式
20:10 libhanjian: statement exp
20:14 Stevearzh_ quit:Quit: Be back later...
20:15 libhanjian: 然而因为exit()不返回值，所以没法玩 argc==2 || exit(-1) && atoi(argv[1]);
20:15 Stevearzh_ joined channel
20:15 varna: #define just(x_) ((x_), 1)
20:16 libhanjian: ({exit(-1);0}
20:16 libhanjian: 再加一个({})就好啦～
20:16 varna: 0会跪的
20:16 libhanjian: 没事啊
20:16 varna: 哦，1也会跪
20:16 libhanjian: p7_init(({(argc == 2) || ({exit(-1);0;}) && atoi(argv[1]);}), test_startup, NULL);
20:16 varna: 其实我会这么作死
20:17 varna: exit( ({ ...; -1; }) );
20:17 varna: ...的部分请发挥想象力
20:17 varna: 这写法纯作死
20:17 libhanjian: 跪地……
20:17 libhanjian: 不愧是CPS专家
20:17 varna: 还是小耗那个说法，异常处理流程不该和正常的混淆
20:18 libhanjian: AFK一下
20:20 Stevearzh_ quit:Ping timeout: 264 seconds
20:21 libhanjian: back
20:22 varna: 其实这种作大死写法在s1的代码里有
20:22 libhanjian: 不过会破坏VIM的语法检查，好丑
20:23 varna: vim的语法检查算做得不错的，然而({ })本身已经不被缺省的C语法检查接受了
20:23 varna: github给Perl的语法检查干脆就是错的，前置声明都不知道
20:24 libhanjian: 大家都不喜欢Perl = =
20:25 varna: (｡･ω･)ﾉ
20:25 condy: <(=°ο°=)>
20:26 varna: condy: 爆
20:26 condy: varna: 爆
20:26 condy: OuO
20:26 varna: 噗噗
20:27 condy: lol
20:28 libhanjian: 羊驼子竟然还搞了个 namespace
20:28 libhanjian: 哦，只是名字这么写的而已……
20:28 varna: 因为不会想名字
20:28 varna: 我曾经打算叫它blackboard
20:28 libhanjian: back borad
20:28 varna: 然而它完全不是个黑板，甚至不如以前我用go写的
20:29 varna: 一块黑板应该是可以写上问题、填上答案的元组空间
20:29 varna: 不过这单纯是个字典而已
20:29 libhanjian: 一个消息必须自己在struct里挂上p7_msg类型的一个field么
20:29 varna: 必须
20:30 varna: 所有你看起来本应是泛型的地方，因为泛型不存在，代以侵入式实现
20:31 libhanjian: test_receiver不能直接接受消息么
20:31 varna: 直接？
20:31 libhanjian: 一直
20:31 varna: 可以
20:31 varna: p7_recv是这样的
20:32 libhanjian: 搞了个while 1 就可以了
20:32 varna: 如果列表空了，它就会阻塞自身
20:32 varna: 如果消息列表不空，会取一条出来
20:32 varna: 所以你手工控制就行
20:32 libhanjian: 对，和channel一样
20:32 varna: Ln685
20:32 varna: 实现其实挺直白的
20:33 libhanjian: 确实
20:35 libhanjian: 4K的栈足够大么
20:35 libhanjian: 总感觉不太够
20:35 varna: 不够，只是随便写的demo
20:35 libhanjian: 记得goroutine都几兆字节了
20:35 varna: 所以我给出了concat
20:35 varna: 你可以首先用一个小栈启动，然后concat上需要的尺寸
20:35 libhanjian: 不过没好的类型系统，void (*foo)(void *)
20:35 libhanjian: 也确实够讨厌的了
20:35 varna: concat阻塞caller coro直到它执行结束
20:36 varna: 这样你可以难看地分段使用栈空间
20:36 varna: 我这么做的考虑主要是同时存在一千个4MB就是4GB了
20:37 varna: 如果它们中的一些能够恰好走出需要对帧尺寸有要求的函数，或许能稍好
20:37 varna: 不过这和公平调度的要求是矛盾的，所以我弃疗，相信玄学
20:37 libhanjian: 我就觉得可以不用再考虑32位了吧
20:37 libhanjian: 直接考虑64位实现吧
20:38 varna: 对64位机来说，这可能也吃掉了一台廉价机器的1/4物理内存
20:38 libhanjian: 这倒也是
20:38 varna: 而这只是一千个coro而已
20:38 xiongmao86 joined channel
20:38 varna: 所以还是提供一个可选方案
20:38 libhanjian: 这也算是CSP-style的一个麻烦处吧，默认分配的stacksize多少都蛋疼
20:38 varna: +
20:39 libhanjian: 手工分配又对developer的直觉有要求
20:39 varna: 实际上这是实现坑
20:39 libhanjian: 如果为了提供保障上mmap protect又引入了无谓的开销
20:39 varna: C实现缺省不提供分段栈，然后就坑了
20:39 libhanjian: 对
20:39 varna: 流毒
20:39 libhanjian: 这也是逼迫golang直接上语言实现的原因吧
20:40 wlemuel joined channel
20:40 libhanjian: 虽然还是纠结到底是copy来copy去，还是把新的分开建
20:40 varna: 我觉得go后来可能没那么大理想了，所以放弃了真·栈切分
20:41 libhanjian: 对
20:41 varna: 这个代价存在，而且不小
20:41 libhanjian: 它给出的数据选择直接拷还更利索些
20:41 varna: 但我觉得挺可惜
20:41 varna: 早期go有很多实现脑洞挺好玩的
20:41 libhanjian: 他们放弃了进一步做更细致优化的努力？
20:42 varna: 大概是嫌麻烦和8-2原则吧
20:42 libhanjian: 反正现在go在类型系统上，在错误处理上，在内存管理上已经越来越向新智负担投降了
20:42 libhanjian: 心智负担投降了
20:42 xiongmao86 quit:Ping timeout: 256 seconds
20:42 varna: 尤其满世界的C风格实现都能活，那么没必要去真的换那个2
20:42 libhanjian: 心（智）智（商）负（兼）担（容）
20:43 libhanjian: 倒也是
20:43 varna: 尽管goroutine真的就是那个20%
20:43 varna: 一百个不算什么，一千个就亮了
20:43 libhanjian: 不过gc还是很杀伤他的使用领域
20:43 libhanjian: 或者至少这东西变成可选啊……
20:43 libhanjian: （虽然好像不容易相容
20:43 varna: 我觉得大概是决策口味的问题
20:44 libhanjian: 嗯
20:44 libhanjian: 好像已经没了plan9的味道了
20:44 libhanjian: 虽然我也不知道那是什么鬼味道（笑
20:45 varna: p9冲向太空，太空兔其实还凑合，就是味道怪
20:45 varna: 有点尿味
20:45 libhanjian: 似乎p7_send_by_name不会主动让渡？
20:45 varna: 我的选择是不让渡
20:46 varna: 如果有一收一发的交互，收上面会让渡
20:46 varna: 否则就接着转
20:46 libhanjian: 可是好像也不能手动让渡？
20:46 varna: p7_coro_yield
20:46 varna: 你可以手工切掉，但不是对称的
20:46 libhanjian: 我在下面加了行，但是吐了
20:46 varna: 吐了？
20:46 varna: 我试试
20:47 varna: 没吐啊……
20:48 varna: 我这里各种不吐
20:48 varna: 求代码
20:49 libhanjian: 不知道，我撤销修改以后又不吐了……
20:49 varna: 不用撤销
20:49 varna: 我这里直接发完yield也不吐的
20:49 xiongmao86 joined channel
20:49 varna: 用1-5个线程都简单试了一下；你那里必吐么？
20:49 libhanjian: 我还在那两个调用里面外面包了for (;;) {}
20:50 libhanjian: 确实是加while(1)的问题
20:50 varna: test_receiver也不退出？
20:50 libhanjian: 16     while (0) {
20:50 libhanjian:  17     p7_send_by_name("test::receiver", &(global_msg[0].msgctl));
20:50 libhanjian:  18         p7_coro_yield();
20:50 libhanjian:  19     printf("sent %p\n", &(global_msg[0]));
20:50 libhanjian:  20     }
20:50 libhanjian: 16     while (1) {
20:50 libhanjian:  17     p7_send_by_name("test::receiver", &(global_msg[0].msgctl));
20:50 libhanjian:  18         p7_coro_yield();
20:50 libhanjian:  19     printf("sent %p\n", &(global_msg[0]));
20:50 libhanjian:  20     }
20:50 libhanjian: 你这么对比测试下？
20:50 varna: 不，你test_receiver也是直接收的？
20:51 libhanjian: test_receiver没改
20:51 varna: 我姑且一试
20:52 varna: 在疯狂发送之后吐了
20:52 varna: 但我不知道发了多少
20:52 varna: 一线程的最快，我看看
20:52 libhanjian: https://pastebin.mozilla.org/8855144
20:52 varna: ok我修一下这个
20:53 Mokou: “旧社会有个风俗，把娃娃对着阳光举起来，看投下来的影子，传说这影子就是人的魂魄，如果影子很深很黑，说明这孩子命硬，好养活。听说PO主小时候也弄过这个，发现影子颜色很浅，周围人看了都说：不好，这孩子魂淡 ”
20:55 libhanjian: 我这里只显示发送一次，就失败了
20:55 varna: 对
20:55 varna: 我正在看为什么删除了一个被孤立的节点
20:55 Mokou: 哪里删除了
20:55 iyzsong: 灵车漂移~
20:55 varna: p7_recv, ln696
20:56 varna: 整个mailbox都坏掉了
20:56 varna: 我改一处试试
20:57 varna: 奇怪……
20:59 varna: 在没有任何并发的情况下错了
20:59 varna: 哦操
20:59 varna: 不是我的锅吧
20:59 varna: 这锅应该是demo的
20:59 libhanjian: 噗
21:00 varna: 一共就两个对象，按地址发
21:00 varna: 然后就爆炸了
21:00 Mokou: 我看看demo
21:00 varna: 就这样的意思……
21:00 varna: 你看lhj发那个
21:00 libhanjian: https://pastebin.mozilla.org/8855144
21:00 varna: 两个对象被重复插进队列
21:00 varna: 然后自然会死的
21:00 hoxily quit:Quit: WeeChat 1.3
21:00 libhanjian: 对象被重复插进对列？
21:00 libhanjian: 队列
21:01 varna: &(global_msg[0].msgctl)
21:01 varna: 这是个侵入式节点对吧
21:01 varna: 比如它第二次被插入队列
21:01 varna: 然后就损坏了
21:01 Mokou: p7_coro_yield不保证执行顺序吧
21:01 libhanjian: 你是指msgctl必须不同？
21:01 varna: 对
21:02 varna: 不过这里还有个疑点
21:02 libhanjian: 也即，&msgctl必须唯一？
21:03 libhanjian: 总觉的羊驼子应该弄个util，比如传入一个struct test_message，每次生成含有不同的msgctl的test_message是实例？
21:03 libhanjian: 的实例
21:04 Mokou: 桥逗麻袋
21:04 varna: 为何1线程会死
21:04 varna: 不
21:04 Mokou: msgctl是自己分配的？
21:04 varna: 这里我还是觉得有问题
21:04 libhanjian: Mokou, 倒不是。
21:05 Mokou: 那为什么会炸掉
21:05 Mokou: 而且我看你的demo里是自己分配的啊
21:05 varna: ln695 ret, self->mailbox 这两个东西
21:06 Mokou: 死亡原因是？
21:06 Mokou: SIGSEGV么
21:06 varna: 先别问了
21:06 libhanjian: 吐核
21:06 libhanjian: 羊驼子debugging
21:07 varna: 目前的情况是这样
21:07 varna: p7impl.c ln695
21:07 cleamoon_ joined channel
21:07 varna: ret认为自己被删掉了，self->mailbox不这么认为
21:08 varna: self->mailbox的两个指针都指向ret, 然而ret的首尾是NULL
21:08 varna: 我重新调整一下demo看看出了什么事情
21:10 libhanjian: 羊驼子这个有个问题，test_msg_t msg = {.cstr = "abc"};是不行的
21:10 cleamoon_: 2012年，日本京都大学数学家望月新一（Shinichi Mochizuki）发表了一篇500页的论文，宣布证明了ABC猜想。ABC猜想涉及到质数、加法和乘法之间的关系，由David Masser和Joseph Oesterle在1985年提出，ABC指的是如a+b=c的方程式，它牵涉到无平方数概念。如果证明正确，将有可能在数论领域掀起一场革命。但论文公布3年之后，没人能给出证明
21:10 cleamoon_: 正确还是错误的明确答案。望月对此非常不满。12月7日，一些世界上最知名的数学家聚集到牛津的克雷数学研究所讨论望月的证明。牛津大学的数学家Minhyong Kim是研讨会的一位组织者，他说，“人们正变得不耐烦、包括我，包括望月。”数学家并不期待会后能完全理解望月的证明，或能对证明给出明确的结论。他们想要被说服
21:10 cleamoon_: 证明含有强有力的新观念，值得进一步探索。与会的数学家认为望月应该把他的证明写的更具有可读性，否则的话今天的状况还会继续下去。
21:10 libhanjian: test_msg_t *msg = malloc; msg->cstr="mys";是可以的
21:10 libhanjian: cleamoon_, 绅士先别刷屏啊
21:10 varna: 只要不一样就行？
21:10 varna: 然而这里仍然有完呢提
21:10 varna: 问题
21:11 varna: 一发一收，按说出来之后的对象跟先前是无关的
21:11 xxxxxxxx: varna: 证明含有强有力的新观念
21:11 libhanjian: 就是test_msg_t msg = {.cstr = "abc"} 这句话，在循环里面只会调用一次
21:11 libhanjian: 但是malloc当然是被调用多次的
21:11 Mokou: 一发一收可以保证么
21:11 varna: 不，我的意思是，这里实际的问题是msg对应的对象一样或者不一样
21:11 libhanjian: 也就是说msgctl的引用，第一个只会使用相同的一个，第二次会使用不同的msgctl
21:11 varna: Mokou: 自己看demo
21:12 varna: libhanjian: 问题是我觉得如果确实一发一收的话，不该有问题
21:12 libhanjian: 羊驼子觉得，即便是msgctl，也应该允许？
21:13 libhanjian: 即便是msgctl相同
21:13 varna: 你假设几个情况，讨论出错和不出错的场合
21:13 libhanjian: http://paste.ubuntu.com/14163108/
21:13 libhanjian: 这种可以
21:13 varna: 现在的问题是你把一个对象从链表里删掉，然后再把它插进链表，我并不认为这有问题
21:14 libhanjian: 我懂了。
21:14 varna: 可我检查696行，发现它压根没删干净
21:14 varna: 我试图删除一个链表中已经删除的节点
21:15 cleamoon_ quit:Read error: Connection reset by peer
21:16 cleamoon_ joined channel
21:17 Mokou: 在我这里sender2根本就没来得及运行
21:18 varna: 不需要sender2
21:18 libhanjian: 跟sender2问题不大。
21:18 varna: 直接去掉它
21:18 Mokou: 但是你那个demo里收了两遍啊
21:18 varna: 他不是while (1)发的么
21:18 libhanjian: 现在的问题是，同一个test_message，如果发两次给同一个receiver会挂掉
21:18 Mokou: while(1)发一次收两次
21:19 varna: 没关系
21:19 Mokou: Sender 1
21:19 Mokou: sent 0x6012c0
21:19 Mokou: [recv] 0x6012c0(hello actor)
21:19 Mokou: Program received signal SIGSEGV, Segmentation fault.
21:19 Mokou: backtrace指出爆炸是在ln37
21:19 varna: 发一次收两次本身是不会死的，这是显然的吧
21:19 varna: ……用力debug你就知道错误在哪了
21:19 varna: 手工看frame
21:19 libhanjian: 但是羊驼子觉得，这个test_message应该可以发两次，因为消费掉以后，这个test_message就从消息队列被删除了，然后再次插入再次消费，不应该有问题
21:19 varna: 然后检查local
21:20 varna: 我只是不知道为什么删不掉
21:20 varna: 我稍微变化一下
21:20 randomclown quit:Quit: Leaving
21:24 varna: 奇怪，为什么我用差不多的代码把自己锁死了
21:24 libhanjian: 卡死在最下面那个yield上了？
21:24 varna: 没收到
21:24 cleamoon_ quit:Read error: Connection reset by peer
21:26 cleamoon_ joined channel
21:28 varna: 哦
21:28 varna: 我日
21:28 varna: 我逗比了……
21:28 varna: 因为根本没发出去
21:29 libhanjian: 我这里是send后面的那个yield挂掉的
21:29 varna: yield挂的？
21:29 varna: 一线程么
21:29 libhanjian: http://paste.ubuntu.com/14163309/
21:29 varna: 不
21:30 libhanjian: ./main.bin 3
21:30 varna: 我的意思是具体位置
21:30 libhanjian: #0  list_add_tail (h=0x10, e=0xef4230) at ./../include/util_list.h:34
21:30 libhanjian: 34	    __list_add(e, h->prev, h);
21:30 varna: frame 1
21:30 libhanjian: #0  list_add_tail (h=0x10, e=0xef4230) at ./../include/util_list.h:34
21:30 libhanjian: #1  mailbox_dispatch (box=box@entry=0xeda1f0) at p7impl.c:528
21:30 libhanjian: #2  0x00007f6949ea9c1d in sched_loop (arg=0xeda090) at p7impl.c:537
21:30 libhanjian: #3  0x00007f6949ea9d13 in sched_loop_cntx_wraper (unused_arg=<optimized out>)
21:30 libhanjian:     at p7impl.c:564
21:30 libhanjian: #4  0x00007f6949b48210 in ?? () from /usr/lib/libc.so.6
21:30 libhanjian: #5  0x0000000000000000 in ?? ()
21:30 libhanjian: p7impl.c:528
21:30 varna: 奇怪
21:31 varna: 528行是邮箱啊
21:31 varna: 你用了多少线程
21:31 varna: 求别挤牙膏
21:31 libhanjian: 哪个是线程数量？如果是 调用的参数，我用的是./main.bin 3
21:32 varna: 3不够真
21:32 libhanjian: 代码的链接我发了……
21:32 varna: 另外你代码链接里的send是错的吧
21:32 varna: ln26
21:32 varna: 在你的注释下面，编译器没报错么
21:32 varna: 哦，没有
21:32 varna: 这段还是错的？
21:32 cleamoon_ quit:Read error: Connection reset by peer
21:32 libhanjian: 哪段？
21:33 varna: 用malloc的版本
21:33 varna: 现在我集中看的是不malloc的
21:33 libhanjian: http://paste.ubuntu.com/14163309/ 这个版本是错的
21:33 varna: 去掉yield就是对的？
21:34 libhanjian: 去掉哪个yield，LINE25？
21:34 varna: +
21:34 cleamoon_ joined channel
21:34 varna: 噗
21:34 libhanjian: 那样的话，当然不会挂
21:34 varna: 等等
21:34 varna: 你为什么一次要发两个
21:34 varna: 这横竖都会错啊
21:35 cleamoon_: @idzhang3: 中国人民大学发布的中国发展信心调查（2015）依法显示，受访者收入学历均与对国家信心成反比，读书越多越反动有无可辩驳的爱国科学道理。
21:35 varna: 保持你原先的ln25不变，注释ln24
21:35 libhanjian: 这样是对的
21:35 varna: 如果不注释ln24，那demo是错的
21:35 libhanjian: 去掉24行当然是对的
21:35 varna: 那么我们换个写法
21:35 libhanjian: 但是如果去掉malloc那两行，用栈上分配的（22行）就不行了
21:36 varna: ok, 用一线程的话，frame 1在哪
21:36 varna: 是不是在p7_recv的list_del(ret)里面
21:36 libhanjian: 我靠，又不出错了
21:36 varna: 什么鬼
21:36 varna: 我这里持续爆炸的
21:36 libhanjian: varna, http://paste.ubuntu.com/14163405/
21:37 cleamoon_: @haoel: 其实，TCP这个协议的灵感应该是来自老婆。你看，老婆总是会说，“你在听我说吗？”，“我说的你听进去了吗？”，“你为什么不回答？”…… 而且，对于老婆的意见，如果你回答“否”，老婆会不停地重传，直到你回答了“好”。
21:37 varna: 把ln44注释掉呢
21:37 varna: 我的demo跟你的不太一样
21:38 libhanjian: LN44删掉，就挂了
21:38 varna: 我总觉得这味道不对
21:38 varna: ln44和45对调呢
21:39 libhanjian: http://paste.ubuntu.com/14163447/ ？
21:39 libhanjian: 没问题
21:40 varna: 这问题扔给我吧
21:40 libhanjian: 。
21:40 varna: 我看看到底是不是个问题
21:40 libhanjian: 我也在想这事儿
21:41 libhanjian: 但是刚才好像确实不能在栈上分配test_message。
21:41 libhanjian: 但是后来不知怎么又不吐了
21:41 cleamoon_ quit:Read error: Connection reset by peer
21:42 cleamoon_ joined channel
21:49 varna: 从demo ln37第一次出来的时候，mailbox就是错的
21:49 cleamoon_ quit:Read error: Connection reset by peer
21:49 Mokou: 你现在的demo是什么样的
21:50 libhanjian: 羊驼子再把你的demo发一遍吧
21:50 cleamoon_ joined channel
21:50 varna: https://pastebin.mozilla.org/8855146
21:51 Mokou: 在我这里第一次发消息以后根本就没调度走
21:51 libhanjian: community/pastebinit 这个包可以直接命令行传代码
21:51 Mokou: 直接回去又发了一次，炸了
21:51 varna: Mokou: 我确认一下这件事
21:51 varna: ok
21:51 varna: 红旗的说法是对的
21:51 varna: 互换ln18-19，用一线程调度
21:52 varna: 是否能看到两次发送？
21:52 Mokou: 我试试
21:52 varna: 我看到了两次
21:52 Mokou: 三次
21:52 varna: 这里有个疑点
21:53 varna: 锅不是我的，但这是个隐患
21:53 Mokou: 对调之前是两次
21:53 varna: 为什么没能立即唤醒呢
21:53 xiongmao86 quit:Quit: Leaving...
21:54 dongge joined channel
21:54 varna: 按说读端应该知道这件事才对
21:56 varna: 我觉得这锅在ln399上
21:57 cleamoon_ quit:Read error: Connection reset by peer
21:57 varna: 但问题是这锅我要不要甩
21:57 cleamoon_ joined channel
22:01 libhanjian: 羊驼子发出来的代码看起来没有什么使用上的不妥当
22:01 varna: 我逐渐看到锅了
22:03 varna: 为什么我write之后，管道触发，但读出来的是-1...
22:03 Mokou: 哪里
22:03 varna: 不对
22:03 varna: 不对不对
22:04 * libhanjian 施法中
22:05 varna: 哦我知道了
22:05 varna: 是这样的
22:05 cleamoon_ quit:Read error: Connection reset by peer
22:06 varna: recv->sched->send, send选择yield 此时running不为NULL
22:06 varna: yield之后唤醒，把recv放在头上
22:06 varna: 此时running和队头不一致……
22:07 Mokou: ……
22:07 cleamoon_ joined channel
22:08 varna: 这回就对了
22:08 varna: 这是个古老的bug
22:08 dongge: 哈喽
22:08 varna: helo
22:08 libhanjian: 羊驼子这个p7实现，调度好像没有什么规律
22:08 libhanjian: dongge, hi
22:08 varna: 有的
22:09 varna: 实际上那是个古老的错误
22:09 libhanjian: 羊驼子先修吧
22:09 varna: 一句话就ok
22:09 Mokou: 今天才炸出来吗……
22:09 varna: 我稍微测试下
22:09 Mokou: 改一下running？
22:09 libhanjian: 别说着说着忘了潜在的逻辑了
22:09 dongge: 这个频道是做啥的？
22:09 varna: 这个错误的历史比我入舰坑的时间还久
22:09 dongge: 你们聊的我都不晓得是啥
22:09 Mokou: ……
22:09 varna: dongge: 编程和杂谈相关
22:09 dongge: 咋还炸了？
22:10 dongge: 还有锅？
22:10 Mokou: ……
22:10 Mokou: dongge: 阁下来自？
22:11 varna: lhanjian: 刚才我那个demo只在1线程下正确
22:11 dongge: 咋回答你勒
22:11 dongge: 来自中国
22:11 libhanjian: varna, 可是即使是1线程，也挂
22:11 dongge: 你是不是问我是做啥的？
22:11 varna: libhanjian: 我修过了，等我再测试下就push
22:11 Mokou: 不，我是问阁下是从哪里知道这里的
22:12 libhanjian: 先发个简单的patch让我思考下
22:12 dongge: 我电脑上有个聊天的HEXCHAT
22:12 libhanjian: 算了，羊驼先修吧
22:12 varna: libhanjian: 我再打二十万个连接就上传
22:12 libhanjian: = =
22:12 varna: 已经修好了，就一句话
22:12 dongge: 有FREENODE，加上就搜索CN相关的
22:13 Mokou: なるほど
22:13 varna: dongge: 这里的人多数有编程相关的知识背景
22:13 * Mokou 精通C++(迫真)
22:14 * lh_mouse slaps Mokou around a bit with a large trout
22:14 * Mokou slaps lh_mouse coro
22:14 * Mokou slaps lh_mouse around a bit with a large coro
22:14 varna: libhanjian: 已patch
22:14 cleamoon_ quit:Read error: Connection reset by peer
22:14 Mokou: 我pull一下
22:14 varna: 限于1线程，再试下我的demo
22:14 dongge: 我也写过一点点，写作业
22:14 varna: 多于1线程就肯定是错的
22:14 varna: 因为逻辑上有变化
22:15 varna: 你们先试，我继续给红旗的kashiwara按十万灌
22:15 Mokou: 我才发现zsh能补全git revert……
22:15 cleamoon_ joined channel
22:16 Mokou: 我这里正常了
22:17 varna: 灌了一百多万，似乎没死
22:17 varna: lhj搞明白我刚才解释那个悲剧没，没明白我再说一次
22:17 libhanjian: 再说一次吧
22:17 Mokou: ~192K次收发没死
22:18 varna: 是这样的，我的调度是按照客观时间协程被收入队列的顺序来，假如没发生阻塞的话
22:18 varna: 所以一开始是receiver进调度
22:18 varna: 然后它把自己卡住了，切回main
22:18 varna: main创建sender, 进调度而且优先调度
22:18 varna: 之后sender发，同时写管道，epoll就绪
22:19 Stevearzh_ joined channel
22:19 varna: 从epoll出来之后，按消息处理例程，应当解除receiver的阻塞
22:19 varna: 此时按照逻辑，receiver被加入调度队列的头部
22:19 libhanjian: 对
22:19 varna: 但这里有一个问题
22:19 varna: 我对现在的内核线程上，上一次重调度是否来自一个就绪协程有约定
22:20 varna: 如果running是NULL, 那么说明重调度来自一个阻塞协程
22:20 varna: 这时候，调度队列顺序是不必调整的
22:20 varna: 如果不是这样，那说明重调度来自一个主动放弃的就绪协程
22:20 varna: 这时候这个协程要去队尾
22:20 varna: 回顾demo逻辑
22:20 varna: send不放弃调度，于是yield
22:21 varna: yield的时候只是切回sched loop, 这时候running非NULL
22:21 varna: 然后从ucontext被切换的一点继续执行sched loop, 重新进epoll
22:21 varna: epoll响应，receiver被加入队头
22:21 varna: 此时running和队头不一致，但我摘的是队头，不是running...
22:22 varna: 于是刚刚就绪的receiver被强行塞到队尾
22:22 varna: 直接哦瘊瘊
22:22 varna: 注意，上面所有的过程在1线程上串行发生，但在多于1线程上不能确定顺序
22:22 cleamoon_ quit:Read error: Connection reset by peer
22:22 varna: 这个错误恐怕从p7还是个概念demo的时候就存在了
22:22 varna: 那时候也没有这么多的重调度，所以ok
22:23 cleamoon_ joined channel
22:25 varna: 总之多谢lhj和红旗的协助
22:25 libhanjian: running到底是个？
22:25 libhanjian: 啥？
22:26 Mokou: 当前内核线程上正在执行的coro吧
22:26 varna: 举例来说，在调度循环里，假定self是内核线程，我说的running就是self->sched_info.running
22:26 varna: 它是当前内核线程上正在执行的coro
22:26 tutu_wind joined channel
22:26 libhanjian: 嗯
22:26 varna: 或者上一个放弃调度的coro
22:26 varna: 如果它不存在，那么就说明上一个coro适当地阻塞了自己
22:26 varna: 调度循环不需要知道别的细节了
22:27 libhanjian: 羊驼子加入“上一个放弃调度的coro”这个语义，会不会导致以后的实现变得更困难了？
22:27 varna: 不会，因为这只是概念上的意思
22:27 libhanjian: 放弃调度是指yield吧
22:27 varna: 未必
22:27 varna: yield是不变更running的调度
22:28 varna: 此时有不变式“running就是可调度队列的头元素”
22:28 lh_mouse: ucontext 为啥 deprecated。
22:28 varna: 在IO上，这个不变式被维持
22:28 lh_mouse: void * func () 完全可以改成 void * func (...) 啊。
22:28 varna: lh_mouse: 原型里有()参数表
22:28 varna: C目前不接受(...)吧
22:28 varna: C艹是合法的
22:28 varna: 但在内部通信上，我忘了这个不变式失效了……
22:29 varna: 这个不变式的维持需要所有修改可调度队列的列表操作顺序同一
22:29 varna: 或者都头，或者都尾
22:29 lh_mouse: 日。
22:29 lh_mouse: $ echo 'void foo(...){ }' | gcc -pedantic -std=c11 -c -x c -
22:29 lh_mouse: <stdin>:1:10: error: ISO C requires a named argument before '...'
22:29 varna: 不然的话，调running一定正确，调head可能错误
22:30 varna: lh_mouse: 我以前试过用这个原型，C糊了我一脸，超不开心
22:30 cleamoon_ quit:Read error: Connection reset by peer
22:30 cleamoon_ joined channel
22:30 lh_mouse: 改成 make_context(context_t *ctx, void *func(void *), void *param) 呢？
22:31 varna: 那样合法，但改变了一点点意思
22:32 varna: 原先是void (*)(ucontext_t *, void (*)(), int, ...)
22:32 varna: 接受参数列表，仿若调用函数
22:32 varna: 但实现其实做不到很好
22:32 varna: 窃以为，这个锅应该让C标准同时不在乎()和(...)两个原型来背
22:32 varna: 这使得参数转发甚至不合式，挺糟的
22:33 lh_mouse: C 本来就没参数转发。
22:33 varna: 我只需要字面上做个样子
22:33 varna: 其他的事情都是hack了
22:34 lh_mouse: 用一个 intptr_t 当参数是（字面上）比较合理的解决方案。
22:34 varna: 然后硬塞进去么
22:34 varna: 其实GLib是这么搞的
22:34 lh_mouse: 弄结构体丢进去。
22:34 varna: 他们要求一个指针参数，但实际无所谓
22:35 varna: 造型的时候用G_CALLBACK宏掩饰一下，显得庄重
22:35 varna: 实际就是cast
22:35 varna: 弄结构体丢有点危险，客户方的本机代码可能不是如此
22:36 varna: 所以其实只需要它合式，别的都可以另说了
22:36 lh_mouse: ISO C 说，如果 longjmp 跳进了另一个线程用 setjmp 初始化的 jmp_buf，则 UB。
22:36 lh_mouse: 这里却没说同一个线程会如何。
22:37 libhanjian: ISO C一边指责ucontext有兼容性问题，一边自己又傻傻弄不清楚
22:37 lh_mouse: sjlj 跳协程实属无奈。
22:37 cleamoon_ quit:Read error: Connection reset by peer
22:37 lh_mouse: 					register AUTO(reg __asm__("bx"), fiber); // 必须是 callee-saved 寄存器！
22:37 lh_mouse: 坑货。
22:38 cleamoon_ joined channel
22:38 lh_mouse: Linux 在 x64 的 GPR 里实际上可用的就这么两个 callee saved。
22:38 lh_mouse: 另一个是 rbp。
22:39 varna: libhanjian: POSIX主要指责原型，ISO C是无知的真正黑手
22:39 Mokou: 睡觉
22:39 Mokou: 诸君武运
22:39 Mokou quit:Quit: 睡觉
22:41 lh_mouse: 微软这点上比 GNU 傻逼实在强太多。
22:41 varna: 微软在ABI上做得相对没节操，故而略干净
22:41 lh_mouse: e 字头的寄存器在 r 字头上维持原有的关系不变，调用约定也是一样的。
22:41 varna: ABI这事我总觉得贪多嚼不烂
22:41 varna: 每个圣母决策都可能变成流毒
22:41 libhanjian: 羊驼子这次commit，就是把“删除队列里的下一个协程”，改成了“在队列里删除running吧”
22:41 libhanjian: 羊驼子这次commit，就是把“删除队列里的下一个协程”，改成了“在队列里删除running”吧
22:42 varna: +
22:43 varna: 先撤了
22:43 varna: 有问题memo我
22:43 varna: 武运
22:43 varna quit:Quit: leaving
22:44 lh_mouse: 母鸡系领带，歇后语。
22:44 libhanjian: ？
22:44 lh_mouse: 母鸡 = hen   领带 = tie
22:45 lh_mouse: 母鸡 + 领带 = hentai
22:45 libhanjian: hentai。。。
22:45 cleamoon_: .........
22:46 cleamoon_ quit:Read error: Connection reset by peer
22:46 cleamoon_ joined channel
22:47 lh_mouse quit:Read error: Connection reset by peer
22:55 cleamoon_ quit:Read error: Connection reset by peer
22:55 ASenR joined channel
22:55 cleamoon_ joined channel
22:59 dongge quit:Quit: Leaving
23:03 cleamoon_ quit:Read error: Connection reset by peer
23:04 cleamoon_ joined channel
23:10 ASenR quit:Remote host closed the connection
23:12 cleamoon_ quit:Read error: Connection reset by peer
23:13 cleamoon_ joined channel
23:21 cleamoon_ quit:Read error: Connection reset by peer
23:22 cleamoon_ joined channel
23:30 code_new quit:Quit: ChatZilla 0.9.92 [Firefox 43.0.1/20151216175450]
23:30 cleamoon_ quit:Read error: Connection reset by peer
23:31 cleamoon_ joined channel
23:33 tutu_wind quit:Ping timeout: 260 seconds
23:38 libhanjian: lh_not_bot, poseidon的进展怎么样了
23:39 cleamoon_ quit:Read error: Connection reset by peer
23:39 cleamoon_ joined channel
23:43 libhanjian quit:Quit: Leaving
23:47 cleamoon_ quit:Read error: Connection reset by peer
23:48 cleamoon_ joined channel
23:54 wlemuel quit:Ping timeout: 246 seconds
23:56 cleamoon_ quit:Read error: Connection reset by peer
23:56 cleamoon_ joined channel
